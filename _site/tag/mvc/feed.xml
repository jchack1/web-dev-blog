<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="https://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/tag/mvc/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2020-11-17T12:41:06-07:00</updated>
  <id>http://localhost:4000/tag/mvc/feed.xml</id>

  
  
  

  
    <title type="html">Julia Hack | </title>
  

  
    <subtitle>Web development blog</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">Entity Framework, workflows, databases, and migrations</title>
      <link href="http://localhost:4000/entityframework" rel="alternate" type="text/html" title="Entity Framework, workflows, databases, and migrations" />
      <published>2020-03-18T17:50:00-06:00</published>
      <updated>2020-03-18T17:50:00-06:00</updated>
      <id>http://localhost:4000/entityframework</id>
      <content type="html" xml:base="http://localhost:4000/entityframework">&lt;p&gt;When I began my Udemy course on .NET MVC, as well as my web development practicum, there were a lot of terms I was unfamiliar with - things that perhaps seem very simple to more advanced developers.  I was constantly having to google new terms I came across, and often the language used in the articles I read was not beginner enough for me.  In this post I will simply share some definitions and bits of information I found helpful when I was just starting to learn about .NET.&lt;/p&gt;

&lt;h3 id=&quot;entity-framework-a-tool-we-use-to-access-a-database&quot;&gt;Entity Framework: a tool we use to access a database&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;it’s an object relational mapper (ORM)&lt;/li&gt;
  &lt;li&gt;it maps data from a relational database to objects in our app&lt;/li&gt;
  &lt;li&gt;allows you to work at a higher level of abstraction compared to manual mapping&lt;/li&gt;
  &lt;li&gt;involves:
    &lt;ul&gt;
      &lt;li&gt;opening a connection to the database&lt;/li&gt;
      &lt;li&gt;executing a command&lt;/li&gt;
      &lt;li&gt;reading the data&lt;/li&gt;
      &lt;li&gt;closing the connection&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;relational-vs-non-relational-databases&quot;&gt;Relational vs Non-relational databases&lt;/h4&gt;

&lt;p&gt;As an aside, it might be helpful to define these as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@zhenwu93/relational-vs-non-relational-databases-8336870da8bc&quot;&gt;This Medium article helped me quite a bit&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.pluralsight.com/blog/software-development/relational-non-relational-databases&quot;&gt;As well as this PluralSite article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Relational databases: data stored in tables of rows and columns, and relationships between tables are established using primary and foreign keys. Uses SQL. You have to spend time in the beginning intentionally designing the structure of your database.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;good for complex queries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Non-relational databases: (aka NoSQL) doesn’t use tables, doesn’t need a lot of structure. Data stored in collections of JSON documents.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;good for storing large amounts of data, and for flexibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dbcontext-the-connection-to-the-database&quot;&gt;DbContext: the connection to the database&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;a class provided by Entity Framework&lt;/li&gt;
  &lt;li&gt;a DbContext class file has one or more DbSet&lt;/li&gt;
  &lt;li&gt;DbSet represent tables in the database&lt;/li&gt;
  &lt;li&gt;can use LINQ to query DbSet, and at runtime Entity Framework translates LINQ queries to SQL queries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the DbContext class example below. Each DbSet corresponds to a table in the database.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;D2LDbContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DbContext&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DbSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Students&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&amp;lt;Student&amp;gt; is a type parameter, Students is the property name in plural form&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//the whole line is a property of D2LDbContext&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DbSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Teacher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Teachers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
        
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DbSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Course&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Courses&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DbSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StudentCourse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StudentCourse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DbSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TeacherCourse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TeacherCourse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You use a DbContext object to access tables, and you use DbSet to modify table data.&lt;/p&gt;

&lt;p&gt;Important takeaway: DbContext is a database connection, and DbSet represents a table in the database&lt;/p&gt;

&lt;p&gt;Entity Framework opens the connection to the database, reads the data, maps it to objects, and adds them to DbSet. Entity Framework also keeps track of changes, like when we add, delete, or modify.  When we ask to persist these changes, Entity Framework automatically generates SQL statements and executes them on the database.&lt;/p&gt;

&lt;p&gt;At this point during my reading, I asked myself what “persistence” actually means. I had to read a few different sources to really get it.&lt;/p&gt;

&lt;h4 id=&quot;persistence&quot;&gt;Persistence&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;(techopedia) in terms of data, persistence means an object should not be erased until it is ready to be deleted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Persistent data definitions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;does not change and is not accessed frequently&lt;/li&gt;
  &lt;li&gt;master data that’s stable&lt;/li&gt;
  &lt;li&gt;exists from once instance to another&lt;/li&gt;
  &lt;li&gt;stored in an actual format and stays there, like a hard drive; by contrast in memory, when you close the file the data is gone&lt;/li&gt;
  &lt;li&gt;can retrieve the data again and again&lt;/li&gt;
  &lt;li&gt;the ability of the object state to be saved to a database, so the state of the object “persists” whether the app is running or not (stack overflow def.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;entity-framework-workflows&quot;&gt;Entity Framework workflows&lt;/h3&gt;

&lt;p&gt;Two main workflows for Entity Framework: database first and code first&lt;/p&gt;

&lt;p&gt;First, definitions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;domain class: models your data, used to map data from a database to an in-memory object&lt;/li&gt;
  &lt;li&gt;“versioning” a database: sharing all versions of a database that are necessary for other team members to get a project up and running&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Database first:&lt;/strong&gt; design database tables first, then have Entity Framework create the corresponding domain classes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code first:&lt;/strong&gt; create your domain classes then have Entity Framework generate the database tables for us&lt;/p&gt;

&lt;p&gt;Advantages of a code first workflow:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;faster to code, more productive&lt;/li&gt;
  &lt;li&gt;full versioning of database - can migrate to any version of the database at any point in time&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;database-migrations&quot;&gt;Database migrations&lt;/h3&gt;

&lt;p&gt;Database migrations track changes to your database schema. A database migration is moving your data from one platform to another.&lt;/p&gt;

&lt;p&gt;Database schema: the structure/organization of a database, how it is contructed&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a description of the data&lt;/li&gt;
  &lt;li&gt;defines attributes of a database like tables, columns, properties&lt;/li&gt;
  &lt;li&gt;structure that represents the logical view of the database&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;here-are-the-steps-to-a-code-first-migration-in-visual-studio&quot;&gt;Here are the steps to a code first migration in Visual Studio&lt;/h4&gt;

&lt;p&gt;Go to: Tools -&amp;gt; NuGet Package Manager -&amp;gt; Package Manager Console&lt;/p&gt;

&lt;p&gt;Type in console:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;enable-migrations
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This generates a Migrations folder in your solution.&lt;/p&gt;

&lt;p&gt;Then in console:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;add-migration &quot;YourMigrationName&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This generates a new C# class in the Migrations folder&lt;/p&gt;

&lt;p&gt;Finally,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;update-database
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now if you go to App_Data in your solution, you have a new database file.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="dotnet" />
      
        <category term="MVC" />
      
        <category term="database" />
      
        <category term="migrations" />
      
        <category term="EntityFramework" />
      

      
        <summary type="html">When I began my Udemy course on .NET MVC, as well as my web development practicum, there were a lot of terms I was unfamiliar with - things that perhaps seem very simple to more advanced developers. I was constantly having to google new terms I came across, and often the language used in the articles I read was not beginner enough for me. In this post I will simply share some definitions and bits of information I found helpful when I was just starting to learn about .NET.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Update and Routing</title>
      <link href="http://localhost:4000/routing" rel="alternate" type="text/html" title="Update and Routing" />
      <published>2020-03-18T17:12:00-06:00</published>
      <updated>2020-03-18T17:12:00-06:00</updated>
      <id>http://localhost:4000/routing</id>
      <content type="html" xml:base="http://localhost:4000/routing">&lt;p&gt;A lot has happened in the month since I last wrote.&lt;/p&gt;

&lt;p&gt;I was very busy with my practicum and neglected some of my own projects.  I then went on vacation to Maui for one week, and started watching the Covid-19 crisis unfold from afar. Currently I am at home in self-isolation, working remotely to finish my practicum.  I have great luck and timing - 14 day self-isolation, with 2 weeks left of my practicum. After that, I’m not sure what my situation will be. Perhaps it will be an opportunity to continue my dev learning full time.  Let’s go with that.&lt;/p&gt;

&lt;p&gt;I’m going to try writing posts with one topic only, for now. This post will explain what I know about routing in .NET.&lt;/p&gt;

&lt;p&gt;One definition I will use:
Overload: in C#, some methods will have the same name but can accept different parameters(aka arguements, in other languages). These different options are called “overloads”. You overload one method, rather than writing multiple methods that do the same thing but use different parameters.&lt;/p&gt;

&lt;p&gt;You deal with routing in your RouteConfig.cs file. To create custom routes you have 2 main approaches: Convention-based and Attribute routing. Attribute routing is cleaner and is the recommended way.&lt;/p&gt;

&lt;p&gt;Convention-based:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;in RegisterRoutes, put routes in order of most specific to most generic&lt;/li&gt;
  &lt;li&gt;create routes.MapRoute(); before default route&lt;/li&gt;
  &lt;li&gt;the most commonly used overload accepts 3 parameters: name, url, and default&lt;/li&gt;
  &lt;li&gt;default defines the controller and action that you will use&lt;/li&gt;
  &lt;li&gt;once you create this, you go to the corresponding controller and create the action result&lt;/li&gt;
  &lt;li&gt;MapRoute() can accept another argument for constraints (like number of digits in a year or month) - can define using regular expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For large applications, you can accumulate many custom routes in your RouteConfig.cs file, so you can use attribute routing to make it cleaner.&lt;/p&gt;

&lt;p&gt;Attribute routing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;use attribute above action in controller, rather than creating it in RouteConfig.cs&lt;/li&gt;
  &lt;li&gt;in RouteConfig.cs, add routes.MapMvcAttributeRoutes();&lt;/li&gt;
  &lt;li&gt;for example, in controller type the following above your action [Route(“movies/release/{year}/{month:regex(\d{2}”)})]&lt;/li&gt;
  &lt;li&gt;constraints placed directly in attribute&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="dotnet" />
      
        <category term="MVC" />
      
        <category term="routing" />
      

      
        <summary type="html">A lot has happened in the month since I last wrote.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Beginning to learn .NET</title>
      <link href="http://localhost:4000/learningdotnet" rel="alternate" type="text/html" title="Beginning to learn .NET" />
      <published>2020-02-17T22:30:00-07:00</published>
      <updated>2020-02-17T22:30:00-07:00</updated>
      <id>http://localhost:4000/learningdotnet</id>
      <content type="html" xml:base="http://localhost:4000/learningdotnet">&lt;p&gt;I am currently in the middle of the practicum component of my program. I am entering week 3 of 8, and to be honest I still have a lot of learning to do in order to be useful here.  I have already learned a lot of things that were not taught in my program, which I guess is the point of working in a real office. It hasn’t been easy and I suspect it will continue that way.&lt;/p&gt;

&lt;p&gt;The source of all my trouble is the fact that until now I never learned C# or .NET, and we spent maybe half and hour in class on MVC.  I consider myself to be more skilled at front end development, but my job is almost entirely back end. At least so far. Having knowledge of ASP.NET and MVC applications beforehand would have been extremely helpful. I believe the most helpful information will be anything to do with the structure of MVC applications, so I can understand how to navigate my company’s project. One challenge I have found is that tutorials and articles relating to MVC assume a basic to intermediate knowledge of C# already. And the C# tutorials start out at a level that is too beginner for me, given that I already know how to add, subtract, use logical operators and conditionals… I’m on a bit of a time crunch to learn MVC and .NET. And yet my progress feels too slow given that my practicum is only 2 months long.&lt;/p&gt;

&lt;p&gt;Anyway, I’ll get into some of the things I’ve learned so far.  My work notebook is filling up very quickly, but perhaps I’ll just compile what I’ve learned through my studies at home.&lt;/p&gt;

&lt;p&gt;There are many, many, many definitions online of the model, view and controller. On a &lt;a href=&quot;https://blog.codeanalogies.com/2016/05/02/model-view-controller-mvc-explained-through-ordering-drinks-at-the-bar/&quot;&gt;code analogies blog&lt;/a&gt; the author related it to ordering a drink at a bar. Your order is the request, the bartender (and the drink recipe they memorized) is the controller, the ingredients are the model, and the finished drink is the view. Actually very helpful.&lt;/p&gt;

&lt;p&gt;Here are more notes and definitions I’ve been able to compile from various courses and articles, including my Udemy course on ASP.NET MVC Applications:&lt;/p&gt;

&lt;p&gt;Model:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the application data and behavior&lt;/li&gt;
  &lt;li&gt;is independent of UI&lt;/li&gt;
  &lt;li&gt;independent of data persistence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;View:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the HTML displayed to the user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Controller:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;handles the HTTP request&lt;/li&gt;
  &lt;li&gt;used to define and group a set of actions together - see more on actions below&lt;/li&gt;
  &lt;li&gt;any instantiable class ending in “Controller”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(bonus)Router:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;selects which controller will be used, based on the the request that comes in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also a little bit about Entity Framework, which I have learned is important but can’t seem to find plain English definitions of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;need a persistence framework to access the database in an app&lt;/li&gt;
  &lt;li&gt;helps to load objects from a database, and save to a database&lt;/li&gt;
  &lt;li&gt;need this to use dbcontext in your files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yeah, I don’t know. We’ll revist later, maybe with my work notes. Onward!&lt;/p&gt;

&lt;p&gt;Creating a new controller:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;very important fact! When you create a new controller in Visual Studio, you will automatically get a new folder created in Views with the same name&lt;/li&gt;
  &lt;li&gt;when it needs to return a view, the controller will search for the view in a folder with the same name!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Client side stuff/CSS:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ASP.NET uses Bootstrap for CSS.  This is pretty obvious if you have used Bootstrap, when you see the ASP.NET default page… It’s fine.  It’s good if you don’t have time/don’t like/aren’t good at front end.&lt;/li&gt;
  &lt;li&gt;You can use bootswatch.com to get Bootstrap templates to use in your application if you don’t like the default.&lt;/li&gt;
  &lt;li&gt;Go to bootswatch and download the bootstrap.css file for your preferred theme. You can rename if you like. Place in your Content folder of your MVC project&lt;/li&gt;
  &lt;li&gt;You will need to update your Bundle config file if you want to use your new theme, and the file name is different. Go to App_Start -&amp;gt; BundleConfig.cs.  Scroll and look for Content/bootstrap.css, and update the path name if necessary&lt;/li&gt;
  &lt;li&gt;FYI, the BundleConfig.cs file is where you define client-side bundles and assets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Action and ActionResult&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An action is a method in a controller responsible for handling incoming requests&lt;/li&gt;
  &lt;li&gt;Routing maps the requests to our actions&lt;/li&gt;
  &lt;li&gt;An ActionResult is the output of our actions&lt;/li&gt;
  &lt;li&gt;Action Parameters are the inputs for our actions&lt;/li&gt;
  &lt;li&gt;Any public method on a controller type is an action&lt;/li&gt;
  &lt;li&gt;Actions are basically the final destination of our requests in an MVC app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To rename a parameter:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hit F2&lt;/li&gt;
  &lt;li&gt;Type new name&lt;/li&gt;
  &lt;li&gt;All references are now updated automatically in Visual Studio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nullable: to make a parameter nullable means it’s ok for it to have no value passed it - it’s ok for it to be “null”&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;for int and double data types, put “?” afterwards&lt;/li&gt;
  &lt;li&gt;for example: int? = …&lt;/li&gt;
  &lt;li&gt;don’t need to put “?” after strings, because apparently they are already nullable in C#&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, that’s all for this post. I will write more as I continue with my courses, and when I remember to bring home my work notebook.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="dotnet" />
      
        <category term="MVC" />
      

      
        <summary type="html">I am currently in the middle of the practicum component of my program. I am entering week 3 of 8, and to be honest I still have a lot of learning to do in order to be useful here. I have already learned a lot of things that were not taught in my program, which I guess is the point of working in a real office. It hasn’t been easy and I suspect it will continue that way.</summary>
      

      
      
    </entry>
  
</feed>
