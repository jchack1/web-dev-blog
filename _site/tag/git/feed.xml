<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="https://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/tag/git/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2024-12-27T17:12:56-07:00</updated>
  <id>http://localhost:4000/tag/git/feed.xml</id>

  
  
  

  
    <title type="html">Julia Hack | </title>
  

  
    <subtitle>Web development blog</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">Learning Git Workflows</title>
      <link href="http://localhost:4000/github-workflows" rel="alternate" type="text/html" title="Learning Git Workflows" />
      <published>2024-12-27T16:30:00-07:00</published>
      <updated>2024-12-27T16:30:00-07:00</updated>
      <id>http://localhost:4000/github-workflows</id>
      <content type="html" xml:base="http://localhost:4000/github-workflows">&lt;p&gt;In order to get a better idea of how to manage our branches in github at work, we took a LinkedIn Learning course on git workflows. Here are some notes I took during the course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git workflow:&lt;/strong&gt; an agreement amongst a dev team that defines how source code is managed&lt;/p&gt;

&lt;p&gt;There are already many established workflows you can pick from.&lt;/p&gt;

&lt;p&gt;The main building blocks of a workflow include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a shared repo&lt;/li&gt;
  &lt;li&gt;your local repo&lt;/li&gt;
  &lt;li&gt;branches&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;types-of-branches&quot;&gt;Types of branches&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Long-lived branches - remain open throughout the project
    &lt;ul&gt;
      &lt;li&gt;main: holds latest stable code, often holds latest code that has been released to prod&lt;/li&gt;
      &lt;li&gt;develop: branched off of main branch, used to integrate the next version of the code they plan to release, where team merges their work in progress&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Short-lived branches: exist for a short time, then merged
    &lt;ul&gt;
      &lt;li&gt;feature: for developing new feature&lt;/li&gt;
      &lt;li&gt;hotfix: used to fix critical issue, branched from main branch&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-workflow-examples&quot;&gt;Git workflow examples&lt;/h3&gt;

&lt;p&gt;Selecting the right git workflow for your needs depends on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;size of team&lt;/li&gt;
  &lt;li&gt;release cadence - how frequently do you release?&lt;/li&gt;
  &lt;li&gt;how much automation is involved in your process? CICD pipelines etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;git-flow&quot;&gt;Git flow&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;less modern, doesn’t do well with continuous delivery&lt;/li&gt;
  &lt;li&gt;good for less frequent releases, like monthly, quarterly, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Long lived branches:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;main - production ready and can be released&lt;/li&gt;
  &lt;li&gt;develop - all the development changes that are being worked on for the next release
    &lt;ul&gt;
      &lt;li&gt;where devs add their changes and pull the changes of their teammates&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Short lived branches&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;feature: branch from develop branch, for a single feature or bug, merged back into develop&lt;/li&gt;
  &lt;li&gt;release: branch off of develop branch
    &lt;ul&gt;
      &lt;li&gt;if you notice issues, patch features in the release branch&lt;/li&gt;
      &lt;li&gt;when ready, merge into the main branch, as well as develop, so develop has any patches that were made&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;hotfix: patch a production release, branch off main, apply fix, then merge it back into main and develop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can apply branch protection rules in github settings&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;example: require pull request before merging, require approvals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some helpful commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;to set up a branch to track a remote branch, is: &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b develop origin/develop&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;to push new branch, and set up tracking between local repo and shared repo, try adding -u flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin feature/jh-123-site-content -u&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Releasing to production&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;merge release branch into main&lt;/li&gt;
  &lt;li&gt;this can allow devs to keep working on the next release while the current release is getting ready&lt;/li&gt;
  &lt;li&gt;once this is done, need to merge the changes we made to release, into development, so each branch has everything&lt;/li&gt;
  &lt;li&gt;all you have to do is merge release into develop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hotfix&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if you need to fix something that has already been released to main, do a hotfix&lt;/li&gt;
  &lt;li&gt;branch new ‘hotfix’ branch off main&lt;/li&gt;
  &lt;li&gt;merge hotfix branch into main&lt;/li&gt;
  &lt;li&gt;then merge into develop so both have latest fix&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;github-workflow&quot;&gt;Github workflow&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;created by GitHub&lt;/li&gt;
  &lt;li&gt;main is only long-lived branch&lt;/li&gt;
  &lt;li&gt;no release or hotfix branches&lt;/li&gt;
  &lt;li&gt;high release cadence, it’s fine since you’re releasing maybe every few hours&lt;/li&gt;
  &lt;li&gt;branch off main locally, commit changes as they make progress, then push to remote feature branch, so they on’t lose their work&lt;/li&gt;
  &lt;li&gt;pull request into main&lt;/li&gt;
  &lt;li&gt;same thing for hotfixes - branch off main, merge back in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra safeguards you should have so github workflow is successful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;continuous integration&lt;/li&gt;
  &lt;li&gt;automated build and test during deployment&lt;/li&gt;
  &lt;li&gt;unit and integration tests&lt;/li&gt;
  &lt;li&gt;peer review&lt;/li&gt;
  &lt;li&gt;need approvers on pull requests&lt;/li&gt;
  &lt;li&gt;automated deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;trunk-based-development&quot;&gt;Trunk-based development&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;centers around single branch trunk(main)&lt;/li&gt;
  &lt;li&gt;no long-lived branches other than main&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Small teams with high release cadence:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;clone trunk locally, commit against trunk branch, then merge directly into shared repo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For large teams:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use short lived feature branches, like GitHub flow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Release strategies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;release directly from trunk - good for rapid pace&lt;/li&gt;
  &lt;li&gt;create release branch before each release, then devs can work directly off trunk without impacting release&lt;/li&gt;
  &lt;li&gt;hotfix: cherry-pick a single commit to merge into release branch&lt;/li&gt;
  &lt;li&gt;CICD is important, like in GitHub flow&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;feature-flags&quot;&gt;Feature flags&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;toggle availability of feature in your software, or under specific conditions&lt;/li&gt;
  &lt;li&gt;you could toggle a feature on for dev environemnts, but not prod, so devs can test it out&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deployment vs release&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;deployment pushes code into prod, but not available yet&lt;/li&gt;
  &lt;li&gt;release - it’s now available for the user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Strategies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;basic toggle&lt;/li&gt;
  &lt;li&gt;targeted - to certain user segments&lt;/li&gt;
  &lt;li&gt;rollout - increase % of users gradually&lt;/li&gt;
  &lt;li&gt;can be added with simple if statements, or with a library&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="git" />
      
        <category term="version-control" />
      

      
        <summary type="html">In order to get a better idea of how to manage our branches in github at work, we took a LinkedIn Learning course on git workflows. Here are some notes I took during the course.</summary>
      

      
      
    </entry>
  
</feed>
