<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="https://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/tag/dom/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2023-07-03T13:37:40-06:00</updated>
  <id>http://localhost:4000/tag/dom/feed.xml</id>

  
  
  

  
    <title type="html">Julia Hack | </title>
  

  
    <subtitle>Web development blog</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">The DOM</title>
      <link href="http://localhost:4000/DOM-methods" rel="alternate" type="text/html" title="The DOM" />
      <published>2022-11-12T18:30:00-07:00</published>
      <updated>2022-11-12T18:30:00-07:00</updated>
      <id>http://localhost:4000/DOM-methods</id>
      <content type="html" xml:base="http://localhost:4000/DOM-methods">&lt;p&gt;Some more notes about the DOM, from the course I’m working on “The Complete JavaScript Course 2022: From Zero to Expert” on Udemy. This post is more about DOM methods and strategies for common use cases.&lt;/p&gt;

&lt;p&gt;Once again this is a bit messy, since it’s just a quick reference for myself on all the things we can do with the DOM.&lt;/p&gt;

&lt;h3 id=&quot;selecting&quot;&gt;Selecting&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;selecting the whole HTML document: &lt;code class=&quot;highlighter-rouge&quot;&gt;document.documentElement&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;head: &lt;code class=&quot;highlighter-rouge&quot;&gt;document.head&lt;/code&gt;, body: &lt;code class=&quot;highlighter-rouge&quot;&gt;document.body&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;select all, returns a node list: &lt;code class=&quot;highlighter-rouge&quot;&gt;document.querySelectorAll()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More selectors:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;getElementById()&lt;/li&gt;
  &lt;li&gt;getElementsByTagName()&lt;/li&gt;
  &lt;li&gt;querySelector()&lt;/li&gt;
  &lt;li&gt;getElementsByClassName()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTML Collection: a list of elements from the &lt;em&gt;live&lt;/em&gt; webpage, will update if elements are added or deleted&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;not just any type of DOM node - collections are made up of HTML elements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Node list vs HTML collection: a node list stays constant (usually) and won’t update itself, but an HTML collection is live and can update&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;node lists can contain any type of DOM node, but HTML collections can only contain HTML elements&lt;/li&gt;
  &lt;li&gt;node lists can use array methods, HTML collections can’t&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;creatinginserting-elements&quot;&gt;Creating/inserting elements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;insertAdjacentHTML()&lt;/li&gt;
  &lt;li&gt;document.createElement() - returns DOM element, but you need to put it into the page still&lt;/li&gt;
  &lt;li&gt;textContent and innerHTML can add content to an element&lt;/li&gt;
  &lt;li&gt;prepend() - adds element as the first child of an element&lt;/li&gt;
  &lt;li&gt;append() - adds element as the last child of an element
    &lt;ul&gt;
      &lt;li&gt;prepend and append can be used to move elements, since the DOM element is assigned a unique id&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;cloneNode() - copies an element, giving it a unique id&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deleting-elements&quot;&gt;Deleting elements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;remove() - removes element from DOM&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;styling&quot;&gt;Styling&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;getComputedStyle() - pass element into this function to get all its CSS styling&lt;/li&gt;
  &lt;li&gt;can get individual properties from this as well&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.thing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getComputedStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;setProperty() - pass property and value into this to set a CSS property on an element&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.thing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;backgroundColor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//but this is not always necessary&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//can do this instead&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;attributes&quot;&gt;Attributes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;access standard HTML attributes like how we access style above&lt;/li&gt;
  &lt;li&gt;for anything that is not standard, use getAttribute()&lt;/li&gt;
  &lt;li&gt;also a setAttribute() method&lt;/li&gt;
  &lt;li&gt;can get data attributes as well, accessed with “dataset” property&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;classes&quot;&gt;Classes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;get classes with “classList”&lt;/li&gt;
  &lt;li&gt;classList.add()&lt;/li&gt;
  &lt;li&gt;classList.remove()&lt;/li&gt;
  &lt;li&gt;classList.toggle()&lt;/li&gt;
  &lt;li&gt;classList.contains()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DON’T USE: &lt;code class=&quot;highlighter-rouge&quot;&gt;thing.className = &quot;newClass&quot;&lt;/code&gt; to set a class, because it overrides everything. Just use the methods above.&lt;/p&gt;

&lt;h3 id=&quot;coordinates-of-dom-elements&quot;&gt;Coordinates of DOM elements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;getBoundingClientRect(): gives you lots of properties of an element, including how far away it is from the left (x), right, top (y), bottom of the viewport, as welel as the element’s width and height&lt;/li&gt;
  &lt;li&gt;window.pageXOffset or scrollX: how far down the page you have scrolled&lt;/li&gt;
  &lt;li&gt;window.pageYOffset or scrollY: how far you’ve scrolled horizontally, if at all&lt;/li&gt;
  &lt;li&gt;document.documentElement.clientHeight (or clientWidth): gives the height (or width) of the viewport&lt;/li&gt;
  &lt;li&gt;window.scrollTo(): to scroll to coordinates on the page&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//NEWER WAY of scrolling to element&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//no calculations needed&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//just in new browsers though&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollIntoView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;smooth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//OLD WAY&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//combine methods together to get the abolute coordinates of an element&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//not just the coordinates relative to the top of viewport, etc&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageXOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageYOffset&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//can also add an object, to specify behavior&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageXOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageYOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;smooth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;events&quot;&gt;Events&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;mouseEnter(): like hovering, when the mouse is hovering over an element&lt;/li&gt;
  &lt;li&gt;mouseLeave(): mouse is off the element&lt;/li&gt;
  &lt;li&gt;mouseover and mouseout are similar, but mouseenter triggers only when the mouse enters that specific element. mouseover is triggered when the mouse enters that element OR its childredn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How events work - using click events as example&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;element is clicked, and an event is generated at the root of document (top of dom tree)&lt;/li&gt;
  &lt;li&gt;capturing phase: event passes down to the target element, through every parent element on its way&lt;/li&gt;
  &lt;li&gt;target phase begins once the event gets to the target element - then whatever is supposed to happen on click, happens&lt;/li&gt;
  &lt;li&gt;bubbling phase - event travels all the way back up to the root of the document, again through every parent element
    &lt;ul&gt;
      &lt;li&gt;its as if the same event is happening on all the parent elements too&lt;/li&gt;
      &lt;li&gt;so if we also had that event listener on one of the parent elements, the thing would happen there too&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;this is basically events “progagating”&lt;/li&gt;
  &lt;li&gt;you can stop the propagation of an event before it bubbles back up to the parent elements, using e.stopPropagation() - but you don’t want to rely on this unless you really need to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default: event is handled by target element and in bubbling phase, BUT: you can set up some events to happen in capturing phase (add &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; to your event listener code)&lt;/p&gt;

&lt;p&gt;Also, there are exceptions, where there are no capturing or bubbling phases&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mouseover vs mouseenter: note that mouseover events bubble, but mouseenter events DO NOT, since mouseover is triggered by hovering over itself and its children&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;smooth-scroll-into-view&quot;&gt;Smooth scroll into view&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;on the a tag, put the id of the element you’d like to scroll to in the href&lt;/li&gt;
  &lt;li&gt;in the javascript, add an event listener&lt;/li&gt;
  &lt;li&gt;use e.preventDefault() so we aren’t just using the HTML to jump down the page, want our javascript to make it smooth&lt;/li&gt;
  &lt;li&gt;get the id of the element but using this.getAttribute(“href”)&lt;/li&gt;
  &lt;li&gt;select that element using the id, then add scrollIntoView({behavior: smooth})&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example below of adding events to multiple nav links - but, forEach is not very efficient. You could instead add the function to a common parent element, only one time.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.nav-link&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;href&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollIntoView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;smooth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;event-delegation&quot;&gt;Event delegation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;add event listener to common parent&lt;/li&gt;
  &lt;li&gt;determine what element originated the event, using e.target
    &lt;ul&gt;
      &lt;li&gt;check if target contains the correct class of the element you’re looking for&lt;/li&gt;
      &lt;li&gt;if so, using e.target, you can get the id like in the example above, basically do the same code&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dom-traversing&quot;&gt;DOM traversing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;“walking through” the DOM&lt;/li&gt;
  &lt;li&gt;can select elements, and get child elements or use querySelector() on it&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;h2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//can select child elements with a particular class&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//only elements with this class that are child elements of this parent will be selected&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.my-class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//can also select parent elements&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anotherWay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;closest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//closest parent with a particular class&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// can also select direct siblings&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previousSibling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextSibling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;passing-arguments-into-handler-functions&quot;&gt;Passing arguments into handler functions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;event handlers can only accept 1 argument, but there are times when you may need to pass in others&lt;/li&gt;
  &lt;li&gt;you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt; method, as well as the &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; keyword&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;//opacity example, similar to the one in the course&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//let say you want to change the opacity of something based on a hover event&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//only need to pass in the event, using bind in the event handle allows us to use &quot;this&quot; here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nav-link&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;siblings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.nav&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.nav-link&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

   &lt;span class=&quot;nx&quot;&gt;siblings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//bind allows you to add extra arguments, and you can use &quot;this&quot; in your callback&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mouseover&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mouseout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleHover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;intersection-observer-api&quot;&gt;Intersection Observer API&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;user observer to observe a specific target&lt;/li&gt;
  &lt;li&gt;I’ve had some trouble getting this to work the way I want it to, but it’s very powerful&lt;/li&gt;
  &lt;li&gt;can use it to do something when an element comes into view on the screen&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//this is called whenever the target element intersects the root element we define in the options object&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obsCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obsOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//set to null when you want your target to just come into the viewport&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//how much of the section needs to be intersecting the viewport&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IntersectionObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obsCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obsOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="javascript" />
      
        <category term="dom" />
      

      
        <summary type="html">Some more notes about the DOM, from the course I’m working on “The Complete JavaScript Course 2022: From Zero to Expert” on Udemy. This post is more about DOM methods and strategies for common use cases.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Notes about the DOM</title>
      <link href="http://localhost:4000/DOM-notes" rel="alternate" type="text/html" title="Notes about the DOM" />
      <published>2022-10-31T18:30:00-06:00</published>
      <updated>2022-10-31T18:30:00-06:00</updated>
      <id>http://localhost:4000/DOM-notes</id>
      <content type="html" xml:base="http://localhost:4000/DOM-notes">&lt;p&gt;As I mentioned in my last post, I’ve been getting back into my JavaScript course on Udemy called “The Complete JavaScript Course 2022: From Zero to Expert”.&lt;/p&gt;

&lt;p&gt;Here is a messy post with notes about the DOM. It’s really just a quick reference for myself. I added a few notes from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model&quot;&gt;this reference on MDN&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;The DOM is where JavaScript interacts with the browser (or, HTML documents rendered in the browser). It is an API with lots of built in methods and properties. We can use JavaScript to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create, update, delete HTML elements&lt;/li&gt;
  &lt;li&gt;set styles, classes, attributes&lt;/li&gt;
  &lt;li&gt;listen and respond to events&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can do all of this because a &lt;strong&gt;DOM tree&lt;/strong&gt; is generated from the HTML document&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a DOM tree is made out of nodes&lt;/li&gt;
  &lt;li&gt;these include things like addEventListener, createElement, querySelector, .innerHTML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are different types of DOM nodes&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;including HTML elements, text&lt;/li&gt;
  &lt;li&gt;every node is of type &lt;strong&gt;node&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;node type is like a base class that its children are based off&lt;/li&gt;
  &lt;li&gt;nodes are represented by JavaScript objects, which include different methods and properties&lt;/li&gt;
  &lt;li&gt;children of the &lt;strong&gt;node type&lt;/strong&gt; include: element, text, comment, document&lt;/li&gt;
  &lt;li&gt;everything in the HTML, including comments, has to go in the DOM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inheritence&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;all child types get access to their parents’ properties and methods, including the node type&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;about-the-different-types-of-nodes&quot;&gt;About the different types of nodes&lt;/h3&gt;

&lt;p&gt;Document type&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the root of the dom tree&lt;/li&gt;
  &lt;li&gt;includes methods like querySelector(), createElement(), etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Element type&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;base class for HTML elements&lt;/li&gt;
  &lt;li&gt;its child type is HTMLElement, which has other child types for each type of element that exists in HTML, like buttons, divs, images, etc&lt;/li&gt;
  &lt;li&gt;this is because different HTML elements have different attributes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;EventTarget&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;any object that may have an event listener on it&lt;/li&gt;
  &lt;li&gt;is a parent to the node type, and window type&lt;/li&gt;
  &lt;li&gt;meaning you can call addEventListener() on every type of node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Window type&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this is a global object, on the same level as node type&lt;/li&gt;
  &lt;li&gt;represents the window that JavaScript is running in&lt;/li&gt;
  &lt;li&gt;has its own methods and properties, including some familiar ones like window.scroll(), .location(), .innerHeight(), etc&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="javascript" />
      
        <category term="dom" />
      

      
        <summary type="html">As I mentioned in my last post, I’ve been getting back into my JavaScript course on Udemy called “The Complete JavaScript Course 2022: From Zero to Expert”.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Things I learned about the DOM and vanilla JavaScript from cloning the chrome dinosaur game</title>
      <link href="http://localhost:4000/dino-clone" rel="alternate" type="text/html" title="Things I learned about the DOM and vanilla JavaScript from cloning the chrome dinosaur game" />
      <published>2022-05-16T18:30:00-06:00</published>
      <updated>2022-05-16T18:30:00-06:00</updated>
      <id>http://localhost:4000/dino-clone</id>
      <content type="html" xml:base="http://localhost:4000/dino-clone">&lt;p&gt;I learned some new things about vanilla javascript while following a &lt;a href=&quot;https://www.youtube.com/watch?v=47eXVRJKdkU&quot;&gt;tutorial for creating the chrome dino game&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;data-attributes&quot;&gt;Data attributes&lt;/h3&gt;

&lt;p&gt;Data attributes are used to store extra information on an HTML element. They always start with “data-“ and are added to an HTML element like any other attribute. They are meant to be used for data that will not be shown on the screen, or picked up by a screen reader, just for data associated with a particular element.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;score&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-score&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The data attributes for an element are collectively called a “dataset”. You can access the dataset using javascript like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scoreDiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#score&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scoreDataset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scoreDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Data attributes are great for selecting DOM elements in our javascript code. The easiest way to access elements with data attributes is to use the query selector method, adding your data attribute inside square brackets:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scoreDiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[data-score]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;css-variables-and-calc-method&quot;&gt;CSS variables and calc() method&lt;/h3&gt;

&lt;p&gt;When I started learning CSS there weren’t a lot of ways to use variables in your stylesheets - you had to use SASS, which would compile into CSS. There are now more options built into CSS to use variables and functions, including the calc() method.&lt;/p&gt;

&lt;p&gt;This method is fairly straight-forward. You pass some values into calc(), and the value returned from it becomes the value of your CSS property.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.my-class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example we are also passing a variable into calc.&lt;/p&gt;

&lt;p&gt;Variables, or custom properties, are useful for values that repeat often in your stylesheet. We also used them in the dino game code when we needed to manipulate a value using javascript.&lt;/p&gt;

&lt;p&gt;Variables are declared in your stylesheet with a double hyphen &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;--&quot;&lt;/code&gt; preceding the variable name, and are accessed using the var() function.&lt;/p&gt;

&lt;p&gt;In the dino game code we often selected our elements using data attributes and changed their custom CSS properties in our javascript code. This is how we were able to make the game interactive.&lt;/p&gt;

&lt;h3 id=&quot;css-getpropertyvalue-and-setproperty&quot;&gt;CSS getPropertyValue() and setProperty()&lt;/h3&gt;

&lt;p&gt;These are built in functions that allow you to get the value of a CSS property, and set or change the value of a CSS property.&lt;/p&gt;

&lt;p&gt;They are used on your elements once they are selected in your javascript code.&lt;/p&gt;

&lt;p&gt;We also needed to use a window method called &lt;strong&gt;getComputedStyle()&lt;/strong&gt;, which returns an object containing all the CSS properties for an element.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scoreDiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[data-score]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getComputedStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scoreDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPropertyValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;margin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The object returned from getComputedStyle() is read only, so when you want to update a value, you use setProperty() on the element’s style property like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//pass in the property and its new value&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;scoreDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;margin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;20px&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;getboundingclientrect&quot;&gt;getBoundingClientRect()&lt;/h3&gt;

&lt;p&gt;This one isn’t new to me, but I had never used it in a game before. This function returns an object with information on the size of an element and its position within the viewport.&lt;/p&gt;

&lt;p&gt;In the dino game we get these values for both the dino and the cacti. Whenever any of the position values are the same, that means a collision has occurred, and the game is over.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I don’t often work with vanilla javascript anymore since I spend most of my time using React. It’s important to understand the basics and it’s been really helpful to fill some gaps in my knowledge regarding working with the DOM, so I can make my code more interactive.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="javascript" />
      
        <category term="css" />
      
        <category term="dom" />
      

      
        <summary type="html">I learned some new things about vanilla javascript while following a tutorial for creating the chrome dino game.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Notes on jQuery</title>
      <link href="http://localhost:4000/jquery-notes" rel="alternate" type="text/html" title="Notes on jQuery" />
      <published>2020-04-20T21:30:00-06:00</published>
      <updated>2020-04-20T21:30:00-06:00</updated>
      <id>http://localhost:4000/jquery-notes</id>
      <content type="html" xml:base="http://localhost:4000/jquery-notes">&lt;p&gt;I have seen jQuery all over the place, including at work, but I have never taken the time to learn it in depth.  I figured I needed to do this soon, and there happens to be a section in my current Web Developer Bootcamp Udemy course. Here are some of my notes.&lt;/p&gt;

&lt;p&gt;jQuery is a javascript library that helps us manipulate the DOM.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;shorter code, easier to access dom&lt;/li&gt;
  &lt;li&gt;cross-browser support&lt;/li&gt;
  &lt;li&gt;ajax&lt;/li&gt;
  &lt;li&gt;strong community&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;everything you can do with jQuery you can use without it&lt;/li&gt;
  &lt;li&gt;including lots of extra methods even if you are only using a couple, could have performance issues&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two ways to include jQuery in your app:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;download code for jQuery, link to it in html file
    &lt;ul&gt;
      &lt;li&gt;there’s a full 9000 line file, and also a minified file&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;include CDN in html file
    &lt;ul&gt;
      &lt;li&gt;linking to jQuery file online rather than downloading it to your machine&lt;/li&gt;
      &lt;li&gt;slightly slower performance than having it locally&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure your jQuery libraries are included &lt;strong&gt;before&lt;/strong&gt; your own script files in your HTML. If you are depending on them in your own javascript file, they must be loaded first, otherwise your file can’t find the jQuery methods it is supposed to use.&lt;/p&gt;

&lt;h3 id=&quot;selecting-elements&quot;&gt;Selecting elements&lt;/h3&gt;

&lt;p&gt;Use the $ function to select things:  $()&lt;/p&gt;

&lt;p&gt;This is like using document.querySelectorAll() in vanilla JS. Inside the function use a CSS selector. This function returns all the elements that match the selector. e.g. $(“.someClass”);&lt;/p&gt;

&lt;h3 id=&quot;important-methods&quot;&gt;Important methods&lt;/h3&gt;

&lt;p&gt;For styling: $(selector).css(property, value)&lt;/p&gt;

&lt;p&gt;val(): to get value from an input, can also set the value&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;e.g. set the input’s value to an empty string to clear the input field&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;text(): gets text content in set of matched elements, and can set text content of an element&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;like textContent in vanilla javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;attr(): get the value of an attribute for first matched element, set the value for all matched elements&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;e.g. to set,  $(#myPhoto).attr(“alt”, “Photo of my dog”);&lt;/li&gt;
  &lt;li&gt;can also set several attributes at once using a javascript object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;html(): is like innerHTML in vanilla javascript, gets HTML content of first matched element or sets HTML content of all matched elements&lt;/p&gt;

&lt;p&gt;Below are like the classList properties in vanilla javascript:&lt;/p&gt;

&lt;p&gt;addClass(): add a class or classes to matched elements&lt;/p&gt;

&lt;p&gt;removeClass(): remove a class or classes to matched elements&lt;/p&gt;

&lt;p&gt;toggleClass(): add a class if the matched element doesn’t have it, removes a class if the element has it&lt;/p&gt;

&lt;p&gt;remove(): removes element from the DOM&lt;/p&gt;

&lt;h3 id=&quot;important-jquery-events&quot;&gt;Important jQuery events&lt;/h3&gt;

&lt;p&gt;click(): add a click listener to an element or colection of elements&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;callback function goes in the parentheses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;keypress(): fires in between key being pressed down and coming back up&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;every key has its own code, access it with keyword “which”&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keypress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;you hit enter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;keydown(): fired when key is pressed down&lt;/p&gt;

&lt;p&gt;keyup(): fired when a pressed key is released&lt;/p&gt;

&lt;p&gt;on(): most used jQuery event method&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;similar to vanilla js addEventListener,&lt;/li&gt;
  &lt;li&gt;used most of the time&lt;/li&gt;
  &lt;li&gt;include the type of event, and a callback function&lt;/li&gt;
  &lt;li&gt;adds listeners for all potential items that aren’t there when the page loads
    &lt;ul&gt;
      &lt;li&gt;“click”, on the other hand, only creates listeners for things that are on the page when it loads&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mouseenter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-weight&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bold&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;this-in-jquery&quot;&gt;“this” in jQuery&lt;/h3&gt;

&lt;p&gt;In jQuery you need to wrap “this” in a jQuery selector, so it knows we’re using a jQuery object, like so:  $(this)&lt;/p&gt;

&lt;p&gt;If you use just plain this, like you would in vanilla javascript, it will not work.&lt;/p&gt;

&lt;h3 id=&quot;common-jquery-effects&quot;&gt;Common jQuery effects&lt;/h3&gt;

&lt;p&gt;fadeOut(): current opacity to transparent, can specify the speed&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;elements are hidden, not deleted&lt;/li&gt;
  &lt;li&gt;can include a callback function, because we often want something to happen &lt;em&gt;after&lt;/em&gt; the the fade has completed. If you include this in a separate line of code after fadeOut, it will execute right away, possibly before the fade is even complete&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;fadeIn(): similar to fadeOut&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;element should start out as display none; it gets changed to display block when you use the function&lt;/li&gt;
  &lt;li&gt;also include callback functions inside, for same reason as above fadeOut()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;fadeToggle(): will know if it needs to fade in or out depending if element is currently displayed&lt;/p&gt;

&lt;p&gt;slideDown(), slideUp(), slideToggle(): height of an element is animated as up or down&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;also have optional callback and ability to specify timing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;parent-elements&quot;&gt;Parent elements&lt;/h3&gt;

&lt;h4 id=&quot;event-bubbling&quot;&gt;Event bubbling&lt;/h4&gt;

&lt;p&gt;If you have a click event on a particular element, it will bubble up into parent elements, triggering any click events on the parents.&lt;/p&gt;

&lt;p&gt;You can tell it not to bubble by adding the following to your click event:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;add “event” (or whatever keyword you choose) as an argument to your callback function&lt;/li&gt;
  &lt;li&gt;add a line inside your callback function: event.stopPropagation();&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;span&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;clicked on a span&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;removing-parent-elements&quot;&gt;Removing parent elements&lt;/h4&gt;

&lt;p&gt;Quite simple, as per below:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;span&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="javascript" />
      
        <category term="jquery" />
      
        <category term="dom" />
      

      
        <summary type="html">I have seen jQuery all over the place, including at work, but I have never taken the time to learn it in depth. I figured I needed to do this soon, and there happens to be a section in my current Web Developer Bootcamp Udemy course. Here are some of my notes.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Notes on the DOM</title>
      <link href="http://localhost:4000/dom-notes" rel="alternate" type="text/html" title="Notes on the DOM" />
      <published>2020-04-19T11:30:00-06:00</published>
      <updated>2020-04-19T11:30:00-06:00</updated>
      <id>http://localhost:4000/dom-notes</id>
      <content type="html" xml:base="http://localhost:4000/dom-notes">&lt;p&gt;I finished my .NET MVC Udemy course and have gone back to my Web Developer Bootcamp Udemy course that I started before going to school.&lt;/p&gt;

&lt;p&gt;I should have completed this before starting my program; it would have made life so much easier if I already had some exposure to these topics.&lt;/p&gt;

&lt;p&gt;The nice thing about completing this now, however, is that I’m breezing right through the content. It’s actually a really good opportunity to review the fundamentals, hear the content explained from another perspective, and pick up some new things I didn’t learn the first time around.&lt;/p&gt;

&lt;p&gt;Today I am working through the section on the DOM. The instructor is really good at highlighting and organizing the most important concepts, so I figured it would help me to make some notes here.&lt;/p&gt;

&lt;h3 id=&quot;important-dom-selector-methods&quot;&gt;Important DOM Selector Methods&lt;/h3&gt;

&lt;p&gt;These return HTML elements as &lt;em&gt;objects&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;document.getElementById()&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;pretty obvious, select the element with this id&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;document.getElementsByClassName()&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;returns a list of all elements with this class name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;document.getElementsByTagName()&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;e.g. to select the body of a page use document.getElementsByTagName(“body”)[0];&lt;/li&gt;
  &lt;li&gt;I have tried using the TagName selector in the past but I could never get it to work. It was only when I saw the index of 0 ([0]) being used that I understood my problem&lt;/li&gt;
  &lt;li&gt;this selector returns all the elements in a &lt;em&gt;list&lt;/em&gt;, and I needed to select the first one - in the case of body, it’s the only one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;document.querySelector()&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;important note!! only returns the &lt;em&gt;first element&lt;/em&gt; it comes across with this selector&lt;/li&gt;
  &lt;li&gt;can use any CSS selector you could use in a CSS file, like “.some-class h1”, using the same syntax you use in a CSS file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;document.querySelectorAll()&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;returns a list of elements that match the selector&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;important-ways-to-manipulate-the-dom&quot;&gt;Important ways to manipulate the DOM&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;changing the style of an element
    &lt;ul&gt;
      &lt;li&gt;can use the “&lt;strong&gt;style&lt;/strong&gt;” property in javascript&lt;/li&gt;
      &lt;li&gt;e.g. tag.style.border = “1px solid black”;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;add/remove classes with javascript
    &lt;ul&gt;
      &lt;li&gt;use javascript “&lt;strong&gt;classList&lt;/strong&gt;” property&lt;/li&gt;
      &lt;li&gt;classList.add, classList.remove, classList.toggle&lt;/li&gt;
      &lt;li&gt;classList is not technically an array&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;changing content of a tag
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;textContent&lt;/strong&gt; to extract and change the text inside an element, treats it like text&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;innerHtml&lt;/strong&gt;, however, maintains what’s inside the HTML, safer to use, treats it like HTML&lt;/li&gt;
      &lt;li&gt;these override what’s already inside the tag&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;changing tag attributes
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;getAttribute()&lt;/strong&gt; and &lt;strong&gt;setAttribute()&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;e.g. link.getAttribute(“href”);&lt;/li&gt;
      &lt;li&gt;e.g. link.setAttribute(“src”, “imgs/whatever.jpg”);&lt;/li&gt;
      &lt;li&gt;can even use to change an id or a class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dom-events&quot;&gt;DOM events&lt;/h3&gt;

&lt;p&gt;Add event listeners to specific elements.&lt;/p&gt;

&lt;p&gt;Important method: &lt;strong&gt;addEventListener(type, functionToCall)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Type = type of event we’re listening for&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“click” is a common one&lt;/li&gt;
  &lt;li&gt;“change” will fire whenever there is any sort of change, like typing into an input&lt;/li&gt;
  &lt;li&gt;“mouseover” for when you hover over an element&lt;/li&gt;
  &lt;li&gt;“mouseout” for when you move your mouse away from the element; can use with “mouseover” to create hover effect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;functionToCall = callback function we want to run when event happens&lt;/p&gt;

&lt;h3 id=&quot;html-inputs-give-you-strings&quot;&gt;HTML inputs give you strings&lt;/h3&gt;

&lt;p&gt;Let’s say you want to use an input field for a number. Even if you input a number, and have the input type=”number”, the value you get will be a string. Like “7” instead of 7. Unless you are using a “==” and type coersion, javascript won’t be able to use this as a number.&lt;/p&gt;

&lt;p&gt;It took me a while to figure this out on my own, and it came up in my course.  The instructor’s solution for this was to place the input value inside the Number() method:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;winningScore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="javascript" />
      
        <category term="dom" />
      

      
        <summary type="html">I finished my .NET MVC Udemy course and have gone back to my Web Developer Bootcamp Udemy course that I started before going to school.</summary>
      

      
      
    </entry>
  
</feed>
