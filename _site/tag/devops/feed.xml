<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="https://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/tag/devops/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2023-08-10T20:00:06-06:00</updated>
  <id>http://localhost:4000/tag/devops/feed.xml</id>

  
  
  

  
    <title type="html">Julia Hack | </title>
  

  
    <subtitle>Web development blog</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">Deploying full stack MERN apps with Render</title>
      <link href="http://localhost:4000/mern-deploy-render" rel="alternate" type="text/html" title="Deploying full stack MERN apps with Render" />
      <published>2022-11-21T20:30:00-07:00</published>
      <updated>2022-11-21T20:30:00-07:00</updated>
      <id>http://localhost:4000/mern-deploy-render</id>
      <content type="html" xml:base="http://localhost:4000/mern-deploy-render">&lt;p&gt;Due to the recent changes with Heroku removing its free tier, I decided to move a few of my portfolio apps over to Render.&lt;/p&gt;

&lt;p&gt;While I understand that companies want to make money, I can’t justify spending money, even a small amount, every month just to host demo portfolio apps that probably no one looks at except me.&lt;/p&gt;

&lt;p&gt;This isn’t a tutorial. I just wanted to mention a few things I ran into while deploying my apps that could help someone (or me) in the future.&lt;/p&gt;

&lt;p&gt;I came across Render when looking for a platform to deploy Node.js/Express/MongoDB apps. This &lt;a href=&quot;https://www.freecodecamp.org/news/how-to-deploy-nodejs-application-with-render/&quot;&gt;freeCodeCamp article&lt;/a&gt; provided a great walkthrough of what to do to deploy the back end of the app. &lt;a href=&quot;https://dev.to/gregpetropoulos/render-deployment-free-tier-of-mern-app-52mk&quot;&gt;This blog post&lt;/a&gt; was also helpful, since it explained how to set up a full stack app.&lt;/p&gt;

&lt;h3 id=&quot;you-need-a-front-end-and-back-end-site&quot;&gt;You need a front end and back end site&lt;/h3&gt;

&lt;p&gt;One thing that was nice about Heroku was I could upload the front and back end in one project. It was easy for the front end to make requests to the back end using simple routes.&lt;/p&gt;

&lt;p&gt;For my first app in Render, I set up a “Web Service” and connected my GitHub repo. This worked very well and was up and running quickly. When I opened the link, however, I just got “not found”. All I was doing by visiting the link was making a request to the root of the app “/”. I added “/getArticles” to the url, which is a route in my app, and then received the data I was expecting. Great! Except all I was getting was raw JSON and there was no front end. This had to be done separately.&lt;/p&gt;

&lt;p&gt;So, I set up a “Static Site”, pointing to the front end code in my repo. I realized that I would need to make requests to the same url I had just used in the browser. This was relatively simple to do. I just added an env variable in Render, and referred to it in my front end code.&lt;/p&gt;

&lt;h3 id=&quot;cors&quot;&gt;CORS&lt;/h3&gt;

&lt;p&gt;Of course, because I now had different urls for the front end and back end, I was now running into CORS issues. This is because the default behavior of CORS is to not allow requests to go through if they are being sent from a different origin than the app receiving the request.&lt;/p&gt;

&lt;p&gt;This was fixed by installing a CORS package in the back end, giving permission to the front end url.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//inside the server.js file&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cors&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//real link is an env variable in Render&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ORIGIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I spent much longer on this than necessary. I kept getting the same CORS error over and over.&lt;/p&gt;

&lt;p&gt;This was because I added an extra “/” on the end of my url, like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;https://juliachack-dev-blog.netlify.app/&lt;/code&gt;, when the real origin had no “/” on the end &lt;code class=&quot;highlighter-rouge&quot;&gt;https://juliachack-dev-blog.netlify.app&lt;/code&gt;. A silly mistake, but it was the reason my app and the origin “didn’t match”.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;It seems like a bit too much work to have to set up two different deployments for one full stack app, and it’s possible I’m missing something. Maybe there is another way that I didn’t see. Otherwise, maybe one day it will require only one deployment. Overall it was a good experience setting up my apps on Render.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="deployment" />
      
        <category term="devops" />
      
        <category term="node.js" />
      
        <category term="cors" />
      

      
        <summary type="html">Due to the recent changes with Heroku removing its free tier, I decided to move a few of my portfolio apps over to Render.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">How I configured ESLint and Prettier for React at work</title>
      <link href="http://localhost:4000/eslint-prettier-react" rel="alternate" type="text/html" title="How I configured ESLint and Prettier for React at work " />
      <published>2020-10-29T17:30:00-06:00</published>
      <updated>2020-10-29T17:30:00-06:00</updated>
      <id>http://localhost:4000/eslint-prettier-react</id>
      <content type="html" xml:base="http://localhost:4000/eslint-prettier-react">&lt;p&gt;At work we are doing some set-up on our projects so we can work better as a team, especially as we grow. It made sense to look into linting and formatting we can use across our projects, so our code is consistent and we don’t have to spend time thinking about correct formatting as we code.&lt;/p&gt;

&lt;p&gt;We decided we wanted to implement ESLint for linting (looking for code quality issues) and Prettier for formatting (code format/style like quotes, tabs, etc). We specifically wanted to add config files to the projects where we can store our settings, so the settings are just there in our project and we don’t have to change too many settings in our code editor.&lt;/p&gt;

&lt;p&gt;For this set-up you need to install the packages locally in your project, and install the extensions directly in your editor updating a couple settings.&lt;/p&gt;

&lt;p&gt;Since we use React I made an example project of how you set up ESLint and Prettier from a brand new React project. The steps I followed are below, as well as some other info, some of which is copied from my work document.&lt;/p&gt;

&lt;h3 id=&quot;steps&quot;&gt;Steps&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Create folder for new app and open in VS Code&lt;/li&gt;
  &lt;li&gt;Open terminal and run command &lt;code class=&quot;highlighter-rouge&quot;&gt;npx create-react-app . &lt;/code&gt; to create app directly in your folder&lt;/li&gt;
  &lt;li&gt;Go to “Extensions” tab and install “ESLint” and “Prettier - Code formatter” in VS Code&lt;/li&gt;
  &lt;li&gt;Install packages locally; run this command in the terminal: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i --save-dev eslint prettier eslint-config-prettier eslint-plugin-prettier&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Note: ESLint React plugins come pre-installed with create-react-app&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Add Prettier config file
    &lt;ul&gt;
      &lt;li&gt;“.prettierrc”&lt;/li&gt;
      &lt;li&gt;Inside the file add a JSON object, your Prettier rules will go here&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Add ESLint config file
    &lt;ul&gt;
      &lt;li&gt;“.eslintrc.json”&lt;/li&gt;
      &lt;li&gt;Add empty JSON object&lt;/li&gt;
      &lt;li&gt;Add “extends” section with the following: &lt;code class=&quot;highlighter-rouge&quot;&gt;“extends”: [“eslint:recommended”, “react-app”]&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;“React-app” extends the React rules that are already included with create-react-app&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Go to File -&amp;gt; Preferences -&amp;gt; Settings ( or Ctrl + , ) to update settings for Prettier extension
    &lt;ul&gt;
      &lt;li&gt;Text Editor -&amp;gt; Formatting -&amp;gt; check “Format on Save”&lt;/li&gt;
      &lt;li&gt;Ensure “Format on Save Mode” is set to “File”&lt;/li&gt;
      &lt;li&gt;In the search bar search for“default formatter” and in the dropdown select “esbenp.prettier-vscode”
        &lt;ul&gt;
          &lt;li&gt;This allows prettier to format all our file types&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;eslint-can-extend-prettier-rules&quot;&gt;ESLint can extend Prettier rules&lt;/h3&gt;

&lt;p&gt;You can set up ESLint to give you warnings when your Prettier options are not being followed. We decided not to go with this for now, because we found that they were quite distracting when working in your editor. However, this is what you would need in your .eslintrc.json file if you wanted that:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;extends&quot;: [&quot;eslint:recommended&quot;, &quot;react-app&quot; / &quot;prettier&quot;], &quot;plugins&quot;: [&quot;prettier&quot;],&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;husky-for-git&quot;&gt;Husky for git&lt;/h3&gt;

&lt;p&gt;We can use Husky to lint our code before we commit our code with git.&lt;/p&gt;

&lt;p&gt;Install Husky with the following command: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i husky --save-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In our package.json, we want to have this in our scripts, so we can run it in the command line:
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;scripts&quot;: { &quot;lint&quot;: &quot;eslint .&quot; }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And include this Husky config as well:
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;husky&quot;: { &quot;hooks&quot;: { &quot;pre-push&quot;: &quot;npm run lint&quot; } }&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://prettier.io/docs/en/install.html&quot;&gt;Prettier Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://eslint.org/docs/user-guide/getting-started&quot;&gt;ESLint Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bfyI9yl3qfE&quot;&gt;Helpful youtube tutorial&lt;/a&gt; - NOTE I did not follow this exactly, but it helped me to learn how ESLint and Prettier can be set up with create-react-app&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="react" />
      
        <category term="devops" />
      

      
        <summary type="html">At work we are doing some set-up on our projects so we can work better as a team, especially as we grow. It made sense to look into linting and formatting we can use across our projects, so our code is consistent and we don’t have to spend time thinking about correct formatting as we code.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">How to fully delete Visual Studio Code from Windows 10</title>
      <link href="http://localhost:4000/how-to-fully-delete-vscode" rel="alternate" type="text/html" title="How to fully delete Visual Studio Code from Windows 10" />
      <published>2020-10-27T14:30:00-06:00</published>
      <updated>2020-10-27T14:30:00-06:00</updated>
      <id>http://localhost:4000/how-to-fully-delete-vscode</id>
      <content type="html" xml:base="http://localhost:4000/how-to-fully-delete-vscode">&lt;p&gt;Recently I was messing around in my VS Code settings trying to get some new extensions to work. Long story short, I was following along with a tutorial, clicked a few things I probably shouldn’t have, and suddenly I could not see the settings UI screen.&lt;/p&gt;

&lt;p&gt;I figured it would be best to just uninstall VS Code and start over fresh, so I went to “Add or remove programs” in system settings to uninstall the program. Seemed simple enough, but when I re-installed VS Code, all my extensions were still there, and my settings were still not right.  So VS Code must be saving data elsewhere on the machine and it is not being deleted when the program is uninstalled.&lt;/p&gt;

&lt;p&gt;I spent some time navigating my PC’s files to determine where the program files were kept, but all it really took was a quick Google search to find some helpful answers.&lt;/p&gt;

&lt;p&gt;To be extra sure, as I found myself confused for the first time about the folder stucture of my PC, I went over a couple different pages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;one on &lt;a href=&quot;https://stackoverflow.com/questions/47689536/uninstall-visual-studio-code-in-windows&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;another on &lt;a href=&quot;https://superuser.com/questions/1380208/how-to-completely-uninstall-visual-studio-code-from-windows-10&quot;&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll list what I did below. It may be overkill, but when I reinstalled VS Code afterwards I had a clean slate; no more extensions and default settings.&lt;/p&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I did&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files\Microsoft VS Code&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;unins000.exe&lt;/code&gt; and uninstall VS Code&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;%AppData%\Code&lt;/code&gt; and delete the Code folder&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;%UserProfile%\.vscode&lt;/code&gt; and delete .vscode folder&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;%AppData%\Local\Programs\Microsoft VS Code&lt;/code&gt; and delete this folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Basically delete any files having to do with VS Code, and it should get rid of any VS Code data lurking around on your machine.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="devops" />
      

      
        <summary type="html">Recently I was messing around in my VS Code settings trying to get some new extensions to work. Long story short, I was following along with a tutorial, clicked a few things I probably shouldn’t have, and suddenly I could not see the settings UI screen.</summary>
      

      
      
    </entry>
  
</feed>
