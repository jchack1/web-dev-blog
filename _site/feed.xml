<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-30T18:53:46-06:00</updated><id>http://localhost:4000/</id><title type="html">Julia Hack</title><subtitle>Web development blog</subtitle><entry><title type="html">Working with JavaScript numbers and dates</title><link href="http://localhost:4000/javascript-numbers-dates" rel="alternate" type="text/html" title="Working with JavaScript numbers and dates" /><published>2022-10-30T18:30:00-06:00</published><updated>2022-10-30T18:30:00-06:00</updated><id>http://localhost:4000/javascript-numbers-dates</id><content type="html" xml:base="http://localhost:4000/javascript-numbers-dates">&lt;p&gt;Doing math and working with dates can sometimes be challenging in programming.&lt;/p&gt;

&lt;p&gt;I’ve been getting back into my JavaScript course on Udemy called “The Complete JavaScript Course 2022: From Zero to Expert”, in order to level up my skills. Here are some notes about numbers, dates, and methods we can use in JavaScript to work with numbers and dates.&lt;/p&gt;

&lt;h3 id=&quot;conversion-parsing&quot;&gt;Conversion, parsing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Number()&lt;/code&gt;: converts to a number&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; : a kind of type coercion that you place in front of what you’d like to convert. Acts just like &lt;code class=&quot;highlighter-rouge&quot;&gt;Number()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Number.parseInt()&lt;/code&gt;: if a string begins with a number(specifically an integer), it will return the number to you. Make sure you include the radix (or base, eg base 10, or base 2 (binary)).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Number.parseFloat()&lt;/code&gt;: if a string begins with a number(in this case, a floating point number, meaning it has a decimal), it will return the number to you, including what’s after the decimal.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Number.isNaN()&lt;/code&gt;: check if something is not a number. Remember that NaN is its own type of value, so you could even put a string into this method, and it will return false, because it is &lt;em&gt;not&lt;/em&gt; NaN, it is a string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notes on NaN &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN&quot;&gt;from MDN&lt;/a&gt;: NaN is returned when a math operation results in something we can’t represent or is undefined. It is also returned when we try to convert something into a number that can’t be. - &lt;code class=&quot;highlighter-rouge&quot;&gt;Number(&quot;257abc&quot;)&lt;/code&gt; returns NaN, since it can’t be turned into a number&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Number.isFinite()&lt;/code&gt;: another, better way to check if something is a floating point number&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Number.isInteger()&lt;/code&gt;: to check if something is an integer, no decimal&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;remainders&quot;&gt;Remainders&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;use &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; to get the remainder of a division operation&lt;/li&gt;
  &lt;li&gt;good when you need to do something every nth time&lt;/li&gt;
  &lt;li&gt;good to use when determining if a number is even or odd
    &lt;ul&gt;
      &lt;li&gt;if you divide a number by 2, and the remainder is 0, the number is even. If the remainder is 1, the number is odd&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;numeric-separators&quot;&gt;Numeric separators&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;use &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; to separate digits in a number, to make it easier to read&lt;/li&gt;
  &lt;li&gt;for example you can use them to separate by the thousands place
    &lt;ul&gt;
      &lt;li&gt;2,000,000 becomes 2_000_000&lt;/li&gt;
      &lt;li&gt;JavaScript ignores the underscores&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;cannot be placed:
    &lt;ul&gt;
      &lt;li&gt;before or after a decimal point&lt;/li&gt;
      &lt;li&gt;at beginning or end of number&lt;/li&gt;
      &lt;li&gt;in a string that needs to be converted to a number - will result in NaN&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bigint&quot;&gt;BigInt&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;there is a limit to the biggest number JavaScript can represent - the max safe integer
    &lt;ul&gt;
      &lt;li&gt;2 to the power of (53 -1)&lt;/li&gt;
      &lt;li&gt;anything larger is unsafe&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BigInt can store these larger numbers&lt;/li&gt;
  &lt;li&gt;add &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; to the end of your number&lt;/li&gt;
  &lt;li&gt;can also use BigInt function&lt;/li&gt;
  &lt;li&gt;you can’t do operations that mix regular numbers and BigInt - make sure the regular number is converted to a BigInt before doing a calculation&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//n&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;569875621352789786315346578967&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//BigInt&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BigInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;685789746533216578964321321234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dates&quot;&gt;Dates&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new Date()&lt;/code&gt; gives you the current date and time&lt;/li&gt;
  &lt;li&gt;you can pass strings and numbers into the Date constructor and JavaScript will parse them&lt;/li&gt;
  &lt;li&gt;unix timestamps (number of milliseconds since Jan 1 1970) can be passed into it as well&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are methods you can use on dates&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getFullYear()&lt;/code&gt; returns the year&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getMonth()&lt;/code&gt; - returns as a number, remember it is 0 based&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getDate()&lt;/code&gt; - returns the day of the month&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getDay()&lt;/code&gt; - returns day of the week as a number also 0 based, starting on Sunday&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getHours()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getMinutes()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getSeconds()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toISOString()&lt;/code&gt; - converts to a string&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getTime()&lt;/code&gt; - returns unix timestamp in milliseconds&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Date.now()&lt;/code&gt; - gives us the timestamp for right now&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also “set” methods for all of the above, so you can update a date&lt;/p&gt;

&lt;h3 id=&quot;operations-with-dates&quot;&gt;Operations with dates&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;you can convert a JavaScript date to a timestamp in milliseconds by converting it to a number&lt;/li&gt;
  &lt;li&gt;if you wanted to subtract two dates, and return the number of days in between them, you’d need to divide them by a numerical value &lt;code class=&quot;highlighter-rouge&quot;&gt;1000 * 60 * 60 * 24&lt;/code&gt; - converts milliseconds to seconds (1000), then to minutes (60), then hours (60), then days (24)&lt;/li&gt;
  &lt;li&gt;do these kinds of conversions depending on whether you want values in days, minutes, hours, etc&lt;/li&gt;
  &lt;li&gt;if you need to do more complicated operations, can get a library like Moment.js&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;internationalization-api&quot;&gt;Internationalization API&lt;/h3&gt;

&lt;h4 id=&quot;dates-1&quot;&gt;Dates&lt;/h4&gt;

&lt;p&gt;Formatting with different languages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use &lt;code class=&quot;highlighter-rouge&quot;&gt;Intl.DateTimeFormat()&lt;/code&gt; function to choose a language (locale), then &lt;code class=&quot;highlighter-rouge&quot;&gt;.format()&lt;/code&gt; to format the date according to the chosen language&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lingoes.net/en/translator/langcode.htm&quot;&gt;this link gives a list of codes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;you can &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat&quot;&gt;read more about this API on MDN here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Intl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DateTimeFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;en-GB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;you can add an “options” object into the formatter to get the date and time, and format how you choose&lt;/li&gt;
  &lt;li&gt;numeric gives a number, long gives you a string - see above MDN link for more options&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;numeric&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;numeric&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;numeric&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;long&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//pass options as an argument&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Intl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DateTimeFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;en-GB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;you can also get it from the user’s browser instead of setting it manually: &lt;code class=&quot;highlighter-rouge&quot;&gt;const locale = navigator.language&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;this is ideal if you will have international users&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;numbers&quot;&gt;Numbers&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;use &lt;code class=&quot;highlighter-rouge&quot;&gt;Intl.NumberFormat().format()&lt;/code&gt; to change number formatting based on location&lt;/li&gt;
  &lt;li&gt;eg. using commas vs decimal points as separators&lt;/li&gt;
  &lt;li&gt;can also pass in an option object, where you can format units (like mph, temperature, percent, currency)&lt;/li&gt;
  &lt;li&gt;have to set the currency in ‘options’, which you can’t get from locale alone&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;settimeout-and-setinterval&quot;&gt;setTimeout and setInterval&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;first argument is a callback function, and the second argument is the amount of time to pass before running the function&lt;/li&gt;
  &lt;li&gt;pass additional arguments (that your callback function needs) after the time argument&lt;/li&gt;
  &lt;li&gt;line of code is read, JavaScript makes note of it and counts down the time in the background, while the rest of your code runs. JavaScript does NOT wait for setTimeout to finish before executing the rest of your code&lt;/li&gt;
  &lt;li&gt;can use &lt;code class=&quot;highlighter-rouge&quot;&gt;clearTimeout()&lt;/code&gt; to delete the timer in certain situations. You would assign your setTimeout function to a variable, then pass that variable into &lt;code class=&quot;highlighter-rouge&quot;&gt;clearTimeout()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;runs a callback function over and over, according to the timer interval you pass as an argument&lt;/li&gt;
  &lt;li&gt;stop it using &lt;code class=&quot;highlighter-rouge&quot;&gt;clearInterval()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="javascript" /><summary type="html">Doing math and working with dates can sometimes be challenging in programming.</summary></entry><entry><title type="html">How to clone a JavaScript object</title><link href="http://localhost:4000/clone-object" rel="alternate" type="text/html" title="How to clone a JavaScript object" /><published>2022-10-18T18:30:00-06:00</published><updated>2022-10-18T18:30:00-06:00</updated><id>http://localhost:4000/clone-object</id><content type="html" xml:base="http://localhost:4000/clone-object">&lt;p&gt;There are several different methods that can be used to clone an object in javascript.&lt;/p&gt;

&lt;h3 id=&quot;the-spread-operator&quot;&gt;The spread operator&lt;/h3&gt;

&lt;p&gt;The spread operator &lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt; was an ES6 addition and it’s very useful for cloning. It creates a &lt;em&gt;shallow copy&lt;/em&gt; of the object.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;orange&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;peach&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;objectassign&quot;&gt;Object.assign()&lt;/h3&gt;

&lt;p&gt;Also an addition from ES6 is &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign()&lt;/code&gt;, where properties from a source object are copied to a target object. This also creates a shallow copy of the original object.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;orange&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;peach&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//first argument is the target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;shallow-vs-deep-copies&quot;&gt;Shallow vs deep copies&lt;/h3&gt;

&lt;p&gt;The difference between shallow and deep copies is that shallow copies share the same references as the original object, but a deep copy has entirely new references. This will often not make a differnce to your code, but it can be important in some cases.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When you need the original object’s values to remain the same, and you are going to be changing the values of the cloned object.&lt;/li&gt;
  &lt;li&gt;When you have a nested object.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;making-a-deep-copy&quot;&gt;Making a deep copy&lt;/h3&gt;

&lt;p&gt;To create a deep copy we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.parse()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.stringify()&lt;/code&gt; together.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;orange&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;peach&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s important to note that this doesn’t work in all cases, because there are some javascript objects that cannot go through &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.stringify()&lt;/code&gt;, like functions and DOM objects. You would need to use shallow copies in this case. You can read more about this in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy&quot;&gt;MDN docs&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><summary type="html">There are several different methods that can be used to clone an object in javascript.</summary></entry><entry><title type="html">What’s the difference between ‘i++’ and ‘++i’</title><link href="http://localhost:4000/increment-decrement" rel="alternate" type="text/html" title="What's the difference between 'i++' and '++i'" /><published>2022-10-02T18:30:00-06:00</published><updated>2022-10-02T18:30:00-06:00</updated><id>http://localhost:4000/increment-decrement</id><content type="html" xml:base="http://localhost:4000/increment-decrement">&lt;p&gt;I have always been familiar with incrementing a variable using &lt;code class=&quot;highlighter-rouge&quot;&gt;i++&lt;/code&gt;, but recently came across &lt;code class=&quot;highlighter-rouge&quot;&gt;++i&lt;/code&gt;. It took me a while to truly understand the difference.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i++&lt;/code&gt; is used as a shorthand for writing &lt;code class=&quot;highlighter-rouge&quot;&gt;i = i + 1&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;++i&lt;/code&gt; does the same. The difference between the two is in what value is returned from this operation.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returnIncrementPrefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;returnIncrementPostfix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above, we use the prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;++i&lt;/code&gt;. When 5 is used as an argument in this function, 6 is returned. Knowing that &lt;code class=&quot;highlighter-rouge&quot;&gt;++i&lt;/code&gt; increments by one, this seems to make sense.&lt;/p&gt;

&lt;p&gt;What happens when we use the postfix?&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returnIncrementPostfix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;returnIncrementPostfix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above code returns a value of 5. At first this doesn’t make sense. We are supposed to be incrementing by 1, right? Shouldn’t this also equal 6?&lt;/p&gt;

&lt;p&gt;Nope! In the first example, these steps occur:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;i is incremented by 1, giving i a value of 6&lt;/li&gt;
  &lt;li&gt;i is returned&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are returned the value of i &lt;em&gt;after&lt;/em&gt; it has been incremented.&lt;/p&gt;

&lt;p&gt;In the second example using the postfix, i is being returned &lt;em&gt;before&lt;/em&gt; it is incremented. The operation doesn’t happen until after 5 has been returned to us.&lt;/p&gt;

&lt;p&gt;It’s all about the order in which the steps occur.&lt;/p&gt;

&lt;h4 id=&quot;tip-for-remembering&quot;&gt;Tip for remembering&lt;/h4&gt;

&lt;p&gt;If you need help remembering which operation does which, think of it this way. If the “++” comes &lt;em&gt;before&lt;/em&gt; the i, incrementation happens before it is returned. If the “++” comes &lt;em&gt;after&lt;/em&gt; the i, the incrementation happens after it is returned.&lt;/p&gt;

&lt;p&gt;Of course, this applies to other operations, including decrementation.&lt;/p&gt;</content><author><name></name></author><category term="computer-science" /><category term="javascript" /><summary type="html">I have always been familiar with incrementing a variable using i++, but recently came across ++i. It took me a while to truly understand the difference.</summary></entry><entry><title type="html">Debugging serverless: ‘AWSLambdaFullAccess does not exist’</title><link href="http://localhost:4000/lambda-fullaccess-bug" rel="alternate" type="text/html" title="Debugging serverless: 'AWSLambdaFullAccess does not exist'" /><published>2022-08-30T18:30:00-06:00</published><updated>2022-08-30T18:30:00-06:00</updated><id>http://localhost:4000/lambda-fullaccess-bug</id><content type="html" xml:base="http://localhost:4000/lambda-fullaccess-bug">&lt;p&gt;I don’t write down the solutions to bugs often enough, so here is how I solved a serverless bug today.&lt;/p&gt;

&lt;p&gt;Maintenance tasks are never quite as simple as they appear at first glance. Last year I updated all our lambda functions at work from Node 12 (and lower) to Node 14 - or so I thought. It turns out there were a few I missed, mostly in projects that are not worked on often.&lt;/p&gt;

&lt;p&gt;A year is a long time to not deploy a serverless app into AWS. I updated the runtime to Node 14, and attempted to deploy. There were several errors, one after the other, that I managed to fix. The last error I received had me stuck for a while.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; CREATE_FAILED: CodeDeployServiceRole (AWS::IAM::Role) Policy arn:aws:iam::aws:policy/AWSLambdaFullAccess does not exist or is not attachable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;While there was some CodeDeploy code in the app, there was never any line of code where we explicitly set “AWSLambdaFullAccess”. I tried commenting out the CodeDeploy code under the IAM role section:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Effect&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Allow&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;codedeploy:*&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But that didn’t do anything.&lt;/p&gt;

&lt;p&gt;After some googling, I saw that the AWSLambdaFullAccess policy had been deprecated, and AWSLambda_FullAccess was its replacement. I vaguely remembered seeing this in an AWS email sometime in the past year. The problem must be connected to this, somehow.&lt;/p&gt;

&lt;p&gt;I checked the serverless-generated cloudformation files in my .serverless folder. There was code for the creation of a AWSLambdaFullAccess policy. But none of our own code was telling it to do that. I thought maybe I had an old version of serverless, but I recently updated my local environment to version 3, and my serverless.yml file didn’t specify a framework version, so that couldn’t be it.&lt;/p&gt;

&lt;p&gt;After lots of trial and error, and more googling, I went back to a &lt;a href=&quot;https://github.com/serverless/components/issues/918&quot;&gt;github issues page&lt;/a&gt; where someone else reported the same issue. At first glace I didn’t see a solution for my problem, but I scrolled a little further and found something helpful.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;One commenter said their issue was that they had an old version of a plugin “serverless-plugin-canary-deployments”. We had that plugin, too. I thought I had checked the plugin versions and found they were the same across our different microservices, and these microservices never gave the same error. Regardless, I updated that npm package to the latest version and deployed. This time it worked!&lt;/p&gt;

&lt;p&gt;It’s possible to receive this same error and have an entirely different issue causing the problem, but this worked for me. Perhaps we can generalize this and say that if you are getting an error related to a deprecation, have a look at the versions of your dependencies.&lt;/p&gt;</content><author><name></name></author><category term="debugging" /><category term="aws" /><category term="serverless" /><summary type="html">I don’t write down the solutions to bugs often enough, so here is how I solved a serverless bug today.</summary></entry><entry><title type="html">DynamoDB scans and pagination</title><link href="http://localhost:4000/dynamo-db-pagination" rel="alternate" type="text/html" title="DynamoDB scans and pagination" /><published>2022-08-22T18:30:00-06:00</published><updated>2022-08-22T18:30:00-06:00</updated><id>http://localhost:4000/dynamo-db-pagination</id><content type="html" xml:base="http://localhost:4000/dynamo-db-pagination">&lt;p&gt;Today I was working on a task that involved archiving some old data in DynamoDB. I didn’t want to permanently delete my data, so I needed to retrieve the data, create a new record in the archive database, and delete the record from the original database.&lt;/p&gt;

&lt;p&gt;These records were never meant to be queried all at once. Normally in the app you would query these records for one user at a time. My PK and SK were not set up to get all of these records as one batch, which meant I needed to scan the database and filter out all of these records in my retrieval step, rather than doing a more efficient query.&lt;/p&gt;

&lt;p&gt;I wrote the code and invoked it in my lambda console. I invoked it multiple times and noticed in my logs that I was retrieving and archiving new records each time. It wasn’t supposed to work like this - I should only need to invoke this function once, and all of the records are archived. My scan wasn’t getting all of the records.&lt;/p&gt;

&lt;p&gt;One &lt;a href=&quot;https://stackoverflow.com/questions/66337345/amazon-dynamodb-scan-is-not-scanning-complete-table&quot;&gt;stack overflow page&lt;/a&gt; brought to my attention a value that is returned from DynamoDB scans and queries called “LastEvaluatedKey”, which is logged to the console when there are more records left to be retrieved. This is how DynamoDB paginates large amounts of data.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html&quot;&gt;AWS developer guide&lt;/a&gt;, this happens after a maximum of 1MB of data has been returned. If there is no “LastEvaluatedKey” logged to the console, there are no more results.&lt;/p&gt;

&lt;h3 id=&quot;how-to-fix-this&quot;&gt;How to fix this&lt;/h3&gt;

&lt;p&gt;I still needed to get all the data. If there are still records left over, you need to do another scan and tell it where the previous scan left off. You do this by making the value “ExclusiveStartKey” in your current scan equal to the previous scan’s “LastEvaluatedKey”. You do this until there are no more records left to retrieve, which means your last scan hasn’t returned a value for “LastEvaluatedKey”.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//not the exact same code for privacy reasons&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scanDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;TableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;myTable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;FilterExpression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contains(PK, :pk) AND begins_with(SK, :sk)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ExpressionAttributeValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;:pk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;team-stats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;:sk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scanResults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dynamo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scanResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ExclusiveStartKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LastEvaluatedKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LastEvaluatedKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scanResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This could have been a use case for a recursive function, but I based my code off one of the answers on the stack overflow page which used a do-while loop. It seemed like a simple, readable solution, and performed reasonably well as my archive function eneded up taking only a couple minutes to complete.&lt;/p&gt;

&lt;p&gt;This helped me to learn a little more about pagination, but also brought up a few questions for me. Are there any other cases in my codebase where the data being requested is more than 1MB? Are we missing data and not realizing it? I will have to check some of our other queries and see if “LastEvaluatedKey” is being returned.&lt;/p&gt;</content><author><name></name></author><category term="dynamodb" /><category term="database" /><category term="debugging" /><category term="aws" /><summary type="html">Today I was working on a task that involved archiving some old data in DynamoDB. I didn’t want to permanently delete my data, so I needed to retrieve the data, create a new record in the archive database, and delete the record from the original database.</summary></entry><entry><title type="html">Things I learned about the DOM and vanilla JavaScript from cloning the chrome dinosaur game</title><link href="http://localhost:4000/dino-clone" rel="alternate" type="text/html" title="Things I learned about the DOM and vanilla JavaScript from cloning the chrome dinosaur game" /><published>2022-05-16T18:30:00-06:00</published><updated>2022-05-16T18:30:00-06:00</updated><id>http://localhost:4000/dino-clone</id><content type="html" xml:base="http://localhost:4000/dino-clone">&lt;p&gt;I learned some new things about vanilla javascript while following a &lt;a href=&quot;https://www.youtube.com/watch?v=47eXVRJKdkU&quot;&gt;tutorial for creating the chrome dino game&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;data-attributes&quot;&gt;Data attributes&lt;/h3&gt;

&lt;p&gt;Data attributes are used to store extra information on an HTML element. They always start with “data-“ and are added to an HTML element like any other attribute. They are meant to be used for data that will not be shown on the screen, or picked up by a screen reader, just for data associated with a particular element.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;score&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-score&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The data attributes for an element are collectively called a “dataset”. You can access the dataset using javascript like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scoreDiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#score&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scoreDataset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scoreDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Data attributes are great for selecting DOM elements in our javascript code. The easiest way to access elements with data attributes is to use the query selector method, adding your data attribute inside square brackets:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scoreDiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[data-score]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;css-variables-and-calc-method&quot;&gt;CSS variables and calc() method&lt;/h3&gt;

&lt;p&gt;When I started learning CSS there weren’t a lot of ways to use variables in your stylesheets - you had to use SASS, which would compile into CSS. There are now more options built into CSS to use variables and functions, including the calc() method.&lt;/p&gt;

&lt;p&gt;This method is fairly straight-forward. You pass some values into calc(), and the value returned from it becomes the value of your CSS property.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.my-class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example we are also passing a variable into calc.&lt;/p&gt;

&lt;p&gt;Variables, or custom properties, are useful for values that repeat often in your stylesheet. We also used them in the dino game code when we needed to manipulate a value using javascript.&lt;/p&gt;

&lt;p&gt;Variables are declared in your stylesheet with a double hyphen &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;--&quot;&lt;/code&gt; preceding the variable name, and are accessed using the var() function.&lt;/p&gt;

&lt;p&gt;In the dino game code we often selected our elements using data attributes and changed their custom CSS properties in our javascript code. This is how we were able to make the game interactive.&lt;/p&gt;

&lt;h3 id=&quot;css-getpropertyvalue-and-setproperty&quot;&gt;CSS getPropertyValue() and setProperty()&lt;/h3&gt;

&lt;p&gt;These are built in functions that allow you to get the value of a CSS property, and set or change the value of a CSS property.&lt;/p&gt;

&lt;p&gt;They are used on your elements once they are selected in your javascript code.&lt;/p&gt;

&lt;p&gt;We also needed to use a window method called &lt;strong&gt;getComputedStyle()&lt;/strong&gt;, which returns an object containing all the CSS properties for an element.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scoreDiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[data-score]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getComputedStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scoreDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPropertyValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;margin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The object returned from getComputedStyle() is read only, so when you want to update a value, you use setProperty() on the element’s style property like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//pass in the property and its new value&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;scoreDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;margin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;20px&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;getboundingclientrect&quot;&gt;getBoundingClientRect()&lt;/h3&gt;

&lt;p&gt;This one isn’t new to me, but I had never used it in a game before. This function returns an object with information on the size of an element and its position within the viewport.&lt;/p&gt;

&lt;p&gt;In the dino game we get these values for both the dino and the cacti. Whenever any of the position values are the same, that means a collision has occurred, and the game is over.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I don’t often work with vanilla javascript anymore since I spend most of my time using React. It’s important to understand the basics and it’s been really helpful to fill some gaps in my knowledge regarding working with the DOM, so I can make my code more interactive.&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><category term="css" /><category term="dom" /><summary type="html">I learned some new things about vanilla javascript while following a tutorial for creating the chrome dino game.</summary></entry><entry><title type="html">More data structures - JavaScript</title><link href="http://localhost:4000/data-structures-javascript" rel="alternate" type="text/html" title="More data structures - JavaScript" /><published>2022-03-11T15:30:00-07:00</published><updated>2022-03-11T15:30:00-07:00</updated><id>http://localhost:4000/data-structures-javascript</id><content type="html" xml:base="http://localhost:4000/data-structures-javascript">&lt;p&gt;Last year I began learning more about data structures. I found myself often wondering how the theory I was learning would apply to JavaScript, the language I code in most frequently.&lt;/p&gt;

&lt;p&gt;Currently I am going through a &lt;a href=&quot;https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;list=WL&amp;amp;index=21&amp;amp;t=3s&quot;&gt;tutorial on JavaScript data structures&lt;/a&gt;, and I will make some notes here as I learn.&lt;/p&gt;

&lt;p&gt;You are able to use built-in data structures in JavaScript for some of these, and others you need to code yourself.&lt;/p&gt;

&lt;p&gt;The instructor uses object-oriented programming, creating classes for the types of data structures, and methods within those classes that can be used to interact with the data structure.&lt;/p&gt;

&lt;p&gt;Some helpful articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.educative.io/blog/javascript-data-structures&quot;&gt;https://www.educative.io/blog/javascript-data-structures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/10-common-data-structures-explained-with-videos-exercises-aaff6c06fb2b&quot;&gt;https://www.freecodecamp.org/news/10-common-data-structures-explained-with-videos-exercises-aaff6c06fb2b&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stack&quot;&gt;Stack&lt;/h3&gt;

&lt;p&gt;Stacks operate with a Last In First Out (LIFO) functionality - the last thing you put onto your stack is the first thing that will be removed, like if you had a stack of books or plates.&lt;/p&gt;

&lt;p&gt;Examples of JavaScript functions that work like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the .push() method, which adds to the top of a stack&lt;/li&gt;
  &lt;li&gt;the .pop() method, which removes from the top of a stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JavaScript already has the build in methods that enable you to use an array as a stack.&lt;/p&gt;

&lt;h3 id=&quot;set&quot;&gt;Set&lt;/h3&gt;

&lt;p&gt;Like an array, but all items are unique - no duplicates.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;read more about sets on MDN&lt;/a&gt;. There is a built in Set function in ES6.&lt;/p&gt;

&lt;p&gt;Using this functionality, you create a new set using the Set() constructor, like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mySet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are several built-in methods you can use to interact with your set.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add() - adds a value to the set&lt;/li&gt;
  &lt;li&gt;has() - checks if the set has a particular item&lt;/li&gt;
  &lt;li&gt;delete() - deletes a value from the set&lt;/li&gt;
  &lt;li&gt;clear() - clears the whole set&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some methods that you might want to use with sets generally, but aren’t included in ES6. You’d need to create your own set class with these methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;union: combines multiple sets and leaves out duplicate items&lt;/li&gt;
  &lt;li&gt;intersection: compares two sets, returns a new set that includes items that are in &lt;strong&gt;both&lt;/strong&gt; sets&lt;/li&gt;
  &lt;li&gt;difference: compares two sets, returns items that are in one set but not the other set&lt;/li&gt;
  &lt;li&gt;subset: tests if one set is a subset of another set - so if one set is fully contained within another set&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;queue&quot;&gt;Queue&lt;/h3&gt;

&lt;p&gt;Follows a First In First Out (FIFO) pattern - the first item placed into the queue is the first item that is processed.&lt;/p&gt;

&lt;p&gt;In JavaScript you can use an array for this, or create your own class with more methods.&lt;/p&gt;

&lt;p&gt;Some built in JavaScript methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;.push() - add to the end of an array&lt;/li&gt;
  &lt;li&gt;.shift() - remove from the beginning of an array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some methods that queues sometimes use, that are not built into JavaScript:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;front() - tells you what’s at the beginning of your queue - in JavaScript we would just do &lt;code class=&quot;highlighter-rouge&quot;&gt;myArray[0] &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;size() - just use &lt;code class=&quot;highlighter-rouge&quot;&gt;myArray.length&lt;/code&gt; to get size&lt;/li&gt;
  &lt;li&gt;isEmpty() - just check the length of the array &lt;code class=&quot;highlighter-rouge&quot;&gt;myArray.length === 0 &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also create &lt;strong&gt;priority queues.&lt;/strong&gt; Again, this is a functionality you would need to create. You pass in the item as well as it’s priority, and it is added to the queue based on priority.&lt;/p&gt;

&lt;p&gt;One way of checking priorities is to use a for loop. Each item you put into the queue is its own array, at the 0 index is the item and at 1 index is a number for its priority. For each element already in the queue, compare its priority value to the incoming item’s priority value. If the incoming priority value is less than the item we are comparing to, we add it to the queue at this position using the “splice” method.&lt;/p&gt;

&lt;h3 id=&quot;tree&quot;&gt;Tree&lt;/h3&gt;

&lt;p&gt;A tree is a branching data structure, where all data points are called nodes. The top node is called the “root” node. Nodes with their own branches are called parent nodes, and nodes branching from them are called child nodes.&lt;/p&gt;

&lt;p&gt;In a &lt;strong&gt;binary tree,&lt;/strong&gt; each node can only have two branches. Nodes in a left subtree must have a value of less than or equal to the parent node. Nodes in a right subtree must have a value of greater than or equal its parent node.&lt;/p&gt;

&lt;p&gt;Using binary search, you don’t have to check every single item for what you’re looking for, and you are able to skip about half the tree. Time taken for the search is proportional to the logarithm of the number of items in the tree, with a big O notion of O(log n). So it’s pretty fast, but slower than searching a hash table.&lt;/p&gt;

&lt;p&gt;Some tree traversal methods (ways of exploring the data in the tree):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in order: begin search at left-most node and end at right-most node; gives values in order from smallest to largest&lt;/li&gt;
  &lt;li&gt;pre order: start at root nodes before looking at leaves&lt;/li&gt;
  &lt;li&gt;post order: start at leaf nodes before going to roots&lt;/li&gt;
  &lt;li&gt;level order: explores all nodes on a level of the tree before moving on to the next level, starting at the root node&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hash-table&quot;&gt;Hash table&lt;/h3&gt;

&lt;p&gt;Hash tables are used for key-value pairs, like maps or objects. They are very efficient and searching doesn’t depend on the number of items, with a big O notion of O(1).&lt;/p&gt;

&lt;p&gt;They work by putting your key into a hash function, which assigns strings to a number, usually an index in an array. The value is stored here.&lt;/p&gt;

&lt;h3 id=&quot;linked-list&quot;&gt;Linked list&lt;/h3&gt;

&lt;p&gt;A list where items are stored in nodes. Nodes contain the item and a reference to the next node.&lt;/p&gt;

&lt;p&gt;When performing any operation on a linked list you always have to start at the beginning of the list, or head node. You can’t just access something in the middle of the list without going through the items preceding it.&lt;/p&gt;

&lt;h3 id=&quot;binary-heap&quot;&gt;Binary heap&lt;/h3&gt;

&lt;p&gt;It has a similar structure to a binary tree, but the ordering is different and is one of two types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;max heap: parent nodes are greater than or equal to child nodes&lt;/li&gt;
  &lt;li&gt;min heap: parent nodes are less than or equal to child nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The order the values within a level does not matter. Levels are filled from left to right.&lt;/p&gt;

&lt;p&gt;Arrays are used to implement heaps in JavaScript. You add values to the array starting at &lt;strong&gt;index 1, not 0. Index 0 is assigned null.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can calculate where elements are in the array using the calculations below, where i is your current index (or position in the tree):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Left child is i * 2&lt;/li&gt;
  &lt;li&gt;Right child is i * 2 + 1&lt;/li&gt;
  &lt;li&gt;Parent is i / 2&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;graphs&quot;&gt;Graphs&lt;/h3&gt;

&lt;p&gt;Graphs contain nodes, or vertices, connected by edges. You can have directed or undirected graphs - meaning, the edges of the graph can have direction, or no direction, respectively.&lt;/p&gt;

&lt;p&gt;An example of an undirected graph could be a social network, where nodes are people and edges are whether or not they are connected/know each other.&lt;/p&gt;

&lt;p&gt;How to traverse a graph:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;breadth-first search: start at one node, visit all its neighbours that are one edge away first, then visits all their neighbours. Keep in mind the graph is directed or undirected - a node could look like it’s one edge away, but if you can’t move in that direction, you can’t go to that node in one move.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I was hoping to find more concrete examples of real applications of data structures in JavaScript. What I did get out of this, though, is a review of basic data structures, and an understanding of how I could create any of these data structures using classes in JavaScript.&lt;/p&gt;

&lt;p&gt;There is a lot more learning I can do with data structures and algorithms. One big take-away is that choosing the right data structure is all about the problem you are trying to solve, and how to solve it efficiently. My strategy going forward may be to deal with it on a case by case basis - when trying to solve a problem I can use my basic knowledge of data structures to think about the most efficient solution, and do more research from there if needed. Built-in JavaScript methods and data structures, like arrays, maps, and objects, have been enough to solve my problems so far, so maybe I don’t need to get too advanced yet.&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><category term="data-structures" /><summary type="html">Last year I began learning more about data structures. I found myself often wondering how the theory I was learning would apply to JavaScript, the language I code in most frequently.</summary></entry><entry><title type="html">Debugging serverless - Eventbridge rule already exists</title><link href="http://localhost:4000/serverless-event-bug" rel="alternate" type="text/html" title="Debugging serverless - Eventbridge rule already exists" /><published>2022-01-31T18:30:00-07:00</published><updated>2022-01-31T18:30:00-07:00</updated><id>http://localhost:4000/serverless-event-bug</id><content type="html" xml:base="http://localhost:4000/serverless-event-bug">&lt;p&gt;I recently came across a bug while deploying a serverless microservice using github actions. I may have seen this error before at some point, but I never wrote down the solution, so here is how I solved it this time.&lt;/p&gt;

&lt;p&gt;This is the error message, with the real function and service names changed:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CREATE_FAILED: AccountsqadeleteAccountrule1EventBridgeRule (AWS::Events::Rule)
myservice-events-qa|accounts-qa-deleteAccount-rule-1 already exists&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a message from Cloudformation telling us that our resource, in this case an event rule, couldn’t be created.&lt;/p&gt;

&lt;p&gt;The strange part is that I only encountered this issue when I deployed to an AWS account via github actions (to my QA account), not when I deployed to my dev account from my local machine. There had to be a difference between my dev and QA environments.&lt;/p&gt;

&lt;p&gt;This also only happened with services that had Lambda functions triggered by Eventbridge. Makes sense given that the error message has to do with event rules, though sometimes there can be other explanations for these kinds of problems.&lt;/p&gt;

&lt;h3 id=&quot;problem-solving&quot;&gt;Problem solving&lt;/h3&gt;

&lt;p&gt;One of the steps involved in github actions deployment is to install serverless on the virtual machine github uses to deploy. The logs told me the environment looked like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; linux, node 12.22.9, framework 3.0.1, plugin 6.0.0, SDK 4.3.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice “framework: 3.0.1”. I remembered that my local serverless version was still at version 2, and I had not updated it since originally installing it. I confirmed my local version was 2.60.0.&lt;/p&gt;

&lt;p&gt;Maybe there were some breaking changes since the new version came out. But when did version 3 even come out? If it’s a recent change, maybe that’s the cause of my problems.&lt;/p&gt;

&lt;p&gt;I did a quick search and found out that version 3 came out a day or two before I started getting my error. In fact, there was &lt;a href=&quot;https://www.serverless.com/blog/serverless-framework-v3-is-live&quot;&gt;an article from January 27th&lt;/a&gt; about the release of version 3, saying it is now live.&lt;/p&gt;

&lt;p&gt;To be sure this was the problem, I checked the last successful deployment of one of my problem services from a few days earlier, and during the build process serverless@2.72.2 was installed.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;The solution to this specific Eventbridge problem was just a few lines of code in my serverless.yml file:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;eventBridge&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;useCloudFormation&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is because Eventbridge resources will now be deployed using native Cloudformation instead of Lambda, &lt;a href=&quot;https://www.serverless.com/framework/docs/deprecations#aws-eventbridge-lambda-event-triggers&quot;&gt;which you can read about here&lt;/a&gt;. The solution above won’t work forever, so I’ll need to do some maintenance on all our serverless projects to bring them up-to-date.&lt;/p&gt;</content><author><name></name></author><category term="aws" /><category term="debugging" /><category term="serverless" /><summary type="html">I recently came across a bug while deploying a serverless microservice using github actions. I may have seen this error before at some point, but I never wrote down the solution, so here is how I solved it this time.</summary></entry><entry><title type="html">Debugging - forEach with async/await</title><link href="http://localhost:4000/forEach-async-await" rel="alternate" type="text/html" title="Debugging - forEach with async/await" /><published>2021-12-07T18:30:00-07:00</published><updated>2021-12-07T18:30:00-07:00</updated><id>http://localhost:4000/forEach-async-await</id><content type="html" xml:base="http://localhost:4000/forEach-async-await">&lt;p&gt;This week I learned that you do not use forEach loops with async/await.&lt;/p&gt;

&lt;p&gt;I was working on a CRUD microservice at work. It uses AWS Lambda functions with Node.js. I was having trouble with the update and delete functions in the app.&lt;/p&gt;

&lt;p&gt;We use async and await to deal with promises when interacting with the database. While investigating the updating issue, I noticed that most of the time, my “put” operations were not going through. No error was being returned - the puts were just not happening. Not a lot to go on when debugging. The code also seemed to stop running when it hit the function that was supposed to return the promise.&lt;/p&gt;

&lt;p&gt;What’s interesting, though, is that &lt;em&gt;sometimes&lt;/em&gt; the operations would actually go through. I’d notice that my item had updated and the rest of the code had run. But I hadn’t made any changes to the code. This suggested to me that it may be an issue with the way I implemented async and await.&lt;/p&gt;

&lt;h3 id=&quot;what-the-code-originally-looked-like&quot;&gt;What the code originally looked like&lt;/h3&gt;

&lt;p&gt;I had no reason before to think that a forEach loop couldn’t be used with async/await. I figured that if you awaited something in the body of the forEach callback, it would work as long as you placed an async in front of your callback, kind of like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTeamName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Team B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getEmployeesByTeamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;teamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Team A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateEmployeeTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;teamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTeamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;employeeId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;what-the-problem-is&quot;&gt;What the problem is&lt;/h3&gt;

&lt;p&gt;Here are a couple articles that helped me understand, as well as the MDN doc for forEach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/async-await-in-loops/&quot;&gt;https://zellwk.com/blog/async-await-in-loops/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hacksparrow.com/javascript/foreach-in-promise-async-function.html&quot;&gt;https://www.hacksparrow.com/javascript/foreach-in-promise-async-function.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Essentially, forEach came before async/await and is not built for it. Async/await doesn’t work with callback based loops. You aren’t actually awaiting the callback. The code just keeps running and doesn’t wait for promises to complete.&lt;/p&gt;

&lt;p&gt;For my work scenario, most of the time I could not get the data back from the database before the forEach loop moved on the to next line of code. I assume that for the times that my code &lt;em&gt;did&lt;/em&gt; work, it was just by chance that I got the data quickly enough that execution had not moved onto the next line yet. Of course, this was a very rare event.&lt;/p&gt;

&lt;h3 id=&quot;what-to-do-instead&quot;&gt;What to do instead&lt;/h3&gt;

&lt;p&gt;Just use a for loop. The code will pause and wait for your promise synchronously, as you’d expect. In my case I used a for…of loop, like below:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTeamName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Team B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getEmployeesByTeamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;teamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Team A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateEmployeeTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;teamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTeamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;employeeId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="javascript" /><category term="debugging" /><summary type="html">This week I learned that you do not use forEach loops with async/await.</summary></entry><entry><title type="html">React refs</title><link href="http://localhost:4000/react-ref" rel="alternate" type="text/html" title="React refs" /><published>2021-11-27T18:30:00-07:00</published><updated>2021-11-27T18:30:00-07:00</updated><id>http://localhost:4000/react-ref</id><content type="html" xml:base="http://localhost:4000/react-ref">&lt;p&gt;For a new personal project I needed to use a React ref in order to obtain some information from the DOM. I have never needed to use them before and this is what I learned.&lt;/p&gt;

&lt;h3 id=&quot;what-was-i-trying-to-do&quot;&gt;What was I trying to do?&lt;/h3&gt;

&lt;p&gt;I am working on an “art canvas” app, where I have a div in the middle of the screen that shows a shape in place of my cursor.&lt;/p&gt;

&lt;p&gt;It is basically a web browser version of Microsoft Paint and is totally unnecessary, but it is a fun way for me to practice front-end skills and hopefully learn D3.js.&lt;/p&gt;

&lt;p&gt;Anyway, I needed a way to calculate the distance between the viewport and the edges of my “canvas”, so I could render my shape wherever the cursor was hovering on the canvas div.&lt;/p&gt;

&lt;p&gt;In vanilla JavaScript I can get the canvas div by using document.querySelector() or other similar document methods. Using element.getBoundingClientRect() will then give you information about the canvas div including its position within the viewport.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#main-canvas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBoundingClientRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once I have the x and y values, I can subtract them from my mouse position values, and have my shape appear in the correct place on the screen.&lt;/p&gt;

&lt;p&gt;However with React, in order to access DOM nodes in this way, I needed to use refs.&lt;/p&gt;

&lt;h3 id=&quot;what-are-refs&quot;&gt;What are refs?&lt;/h3&gt;

&lt;p&gt;Note: these days I use React Hooks, which enable me to use function components instead of class components. I’ll explain refs in the context of function components.&lt;/p&gt;

&lt;p&gt;As mentioned above, one of the biggest use cases for refs is when you want to access something in the DOM. Refs are similar to state in that their value can persist across component re-renders. The difference, though, is that a change in the value of your ref does not cause the component to re-render, whereas for state it does.&lt;/p&gt;

&lt;p&gt;First, you create a variable with the useRef hook:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inputRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you add the ref attribute to the component you are targeting.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MainCanvas&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onMouseMove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleMouseMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/MainCanvas&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This gets our MainCanvas element and saves it to our ref variable above. inputRef is a JavaScript object, and we access our element using the “current” property. As you can see below, I can perform DOM related functions on the element, like getBoundingClientRect(), which gives me the x and y values I need.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleMouseMove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;displacementX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inputRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBoundingClientRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;displacementY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inputRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBoundingClientRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;updateMousePositionX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;displacementX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;updateMousePositionY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;displacementY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;There is, of course, a lot more information out there on refs and how they can be used.&lt;/p&gt;

&lt;p&gt;I recommend checking out the &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#useref&quot;&gt;React hooks docs&lt;/a&gt; as well as &lt;a href=&quot;https://www.youtube.com/watch?v=t2ypzz6gJm0&quot;&gt;this youtube video&lt;/a&gt; for more detailed information, as it was very helpful for me.&lt;/p&gt;</content><author><name></name></author><category term="react" /><summary type="html">For a new personal project I needed to use a React ref in order to obtain some information from the DOM. I have never needed to use them before and this is what I learned.</summary></entry></feed>