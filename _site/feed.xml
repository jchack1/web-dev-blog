<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-11-24T18:11:42-07:00</updated><id>http://localhost:4000/</id><title type="html">Julia Hack</title><subtitle>Web development blog</subtitle><entry><title type="html">When to use the different JavaScript data structures</title><link href="http://localhost:4000/js-data-structures" rel="alternate" type="text/html" title="When to use the different JavaScript data structures" /><published>2020-11-23T18:30:00-07:00</published><updated>2020-11-23T18:30:00-07:00</updated><id>http://localhost:4000/js-data-structures</id><content type="html" xml:base="http://localhost:4000/js-data-structures">&lt;p&gt;A few quick notes from my Udemy Javascript course on when you should use different types of JavaScript data structures. The course is “The Complete JavaScript Course 2020: From Zero to Expert!”, which I started last year but never finished.&lt;/p&gt;

&lt;p&gt;I recently learned of two new data structures that I have never used before. In JavaScript I was never really aware of anything past arrays and objects. The new ones I learned about were sets and maps.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;set&lt;/strong&gt; is a collection of values you can iterate through, which contains unique values. You cannot have any duplicate values in a set, unlike arrays.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;map&lt;/strong&gt;, not to be confused with the .map() method, is like an object in that it has key-value pairs, but keys can be any data type. A map basically returns an array of arrays, with each array containing the key and value.&lt;/p&gt;

&lt;h3 id=&quot;arrays-are-similar-to-sets&quot;&gt;Arrays are similar to sets&lt;/h3&gt;

&lt;p&gt;Arrays and sets are both collections of values, whose values do not need to be described.&lt;/p&gt;

&lt;p&gt;Arrays are good for when you need to allow for duplicate values, and when you need to manipulate data, since there are lots of good built-in array methods you can use.&lt;/p&gt;

&lt;p&gt;Sets are a good way to remove duplicates from an array, and when you must have unique values. So sets compliment arrays nicely.&lt;/p&gt;

&lt;h3 id=&quot;objects-are-similar-to-maps&quot;&gt;Objects are similar to maps&lt;/h3&gt;

&lt;p&gt;Objects and maps are used in instances where you need to describe your values with keys.&lt;/p&gt;

&lt;p&gt;If you need to include methods, use objects. Maps are better for simple collections of key-value pairs.&lt;/p&gt;

&lt;p&gt;If you need your keys to be any data type other than a string, use a map.&lt;/p&gt;

&lt;h3 id=&quot;screenshot-from-course&quot;&gt;Screenshot from course&lt;/h3&gt;

&lt;p&gt;Below you can see a screenshot from the course, which is a nice comparison of all the options.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/udemy-js-screenshot.jpg&quot; style=&quot;max-width: 700px;&quot; alt=&quot;screenshot udemy data structure comparison&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><summary type="html">A few quick notes from my Udemy Javascript course on when you should use different types of JavaScript data structures. The course is “The Complete JavaScript Course 2020: From Zero to Expert!”, which I started last year but never finished.</summary></entry><entry><title type="html">Making a React/Node.js app</title><link href="http://localhost:4000/react-nodejs-app" rel="alternate" type="text/html" title="Making a React/Node.js app" /><published>2020-11-16T18:30:00-07:00</published><updated>2020-11-16T18:30:00-07:00</updated><id>http://localhost:4000/react-nodejs-app</id><content type="html" xml:base="http://localhost:4000/react-nodejs-app">&lt;p&gt;When I was in school we learned about fetching data from external APIs. At the time I found a news API where you could filter articles based on topic. Since I previously went to university and earned a science degree I thought it would be great to make an app for myself that gives me the latest science articles.&lt;/p&gt;

&lt;p&gt;I had genuinely wanted to keep up with what was going on in science. After I graduated I had a subscription to the journal Nature hoping that would help me keep up. I fell hopelessly behind as each week they sent a journal packed with primary science research articles. Even after spending four years reading these types of in-depth research articles, they often took me a long time to get through due to the detailed technical language.&lt;/p&gt;

&lt;p&gt;I figured an app would be easier. I finally got around to making it a year after finding the news API. Since I am learning React I thought this would be a good opportunity to practice my React skills.&lt;/p&gt;

&lt;h3 id=&quot;what-i-actually-did&quot;&gt;What I actually did&lt;/h3&gt;

&lt;p&gt;I specifically searched for tutorials on how to fetch API data with React. I modelled what I did after &lt;a href=&quot;https://www.youtube.com/watch?v=YaioUnMw0mo&quot;&gt;this video by Brad Traversy&lt;/a&gt;, and I also went back to previous React projects/tutorials I followed as a reference. Since I wanted to get data onto cards in a React front end this was perfect.&lt;/p&gt;

&lt;p&gt;I created the front end with my card structure and set up React Router so I could navigate between pages in my app.&lt;/p&gt;

&lt;h4 id=&quot;nodejsexpress-backend&quot;&gt;Node.js/Express backend&lt;/h4&gt;

&lt;p&gt;I realized that I needed to hide my API key somewhere. Even though this is a low stakes project and no one was likely going to hack my app, I wanted to do it right. First I put my key in a .env file in the front-end.&lt;/p&gt;

&lt;p&gt;After reading some posts on StackOverflow I learned that the key is still visible in the Network tab under Chrome dev tools. And I checked - it was very easy to find. At this point I decided to create a Node.js backend to keep my key safe. I needed to do this anyway to deploy my app to Heroku later on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=kJA9rDX7azM&quot;&gt;This was a very helpful tutorial&lt;/a&gt; that taught me how to make a very simple back-end and connection to React front-end.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jchack1/react-science-news-public/blob/main/server.js&quot;&gt;You can see the my server.js code on github&lt;/a&gt;, but to summarize: the “request” npm package was used to actually make the request to the news API. I had to parse the json data to get to my “articles” array. I made a route called “/getArticles” that would be called by Axios in the front end.&lt;/p&gt;

&lt;p&gt;Get route:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/getArticles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;https://gnews.io/api/v4/top-headlines?topic=science&amp;amp;lang=en&amp;amp;country=ca&amp;amp;token=${apiKey}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parsedBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;articles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parsedBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;articles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;articles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And below it is being called in the front end:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/getArticles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setIsLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;cancelToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CancelToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setIsLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is probably a cleaner way to do the above Axios request, but if I didn’t do it this way, there would be too many calls to the news API and I would use up my daily limit in a matter of minutes. This code came from an old tutorial I followed to call data from a Pokemon API.&lt;/p&gt;

&lt;h4 id=&quot;using-a-proxy-in-packagejson-during-development&quot;&gt;Using a proxy in package.json during development&lt;/h4&gt;

&lt;p&gt;The video I linked above goes over this, but when you are working on your local machine you will have React and Node running at the same time. In the package.json you can add a line like this (port number can be any unused port):&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;proxy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:5000&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And set your port to 5000 in your server.js and/or .env file. React by default starts on port 3000, so you will be able to run both projects at once while developing.&lt;/p&gt;

&lt;p&gt;I originally kept this in my package.json when I deployed, but removed it later on. I had several bugs once I deployed and the ports may or may not be related. It’s possible that Heroku ignores this during deployment, but I decided to put both projects back to port 3000 just in case this was causing problems for me.&lt;/p&gt;

&lt;p&gt;It should also be noted that when you add your proxy into your package.json, you must restart your projects for it to take effect.&lt;/p&gt;

&lt;h4 id=&quot;scripts-in-packagejson&quot;&gt;Scripts in package.json&lt;/h4&gt;

&lt;p&gt;I had to pay special attention to my scripts so I could start my server and my React app separately during development. I used the below scripts in package.json:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node server.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-scripts start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-scripts build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-scripts test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-scripts eject&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I kept the “start” script related to the server. When deploying, Heroku looks for your start script to start your Node.js server. I made a special “react-start” script which I ran with “npm run react-start”.&lt;/p&gt;

&lt;h3 id=&quot;other-issues&quot;&gt;Other issues&lt;/h3&gt;

&lt;p&gt;The .env file was very problematic. I used this in the backend to hide my API key from being public on github. This worked fine when running locally, but the “/getArticles” route would not work once deployed on Heroku. I made a last ditch effort to get it to work and added my API key directly into the url in my server.js file. I was shocked when it worked.&lt;/p&gt;

&lt;p&gt;I need to look into this more, but it seems like there is an issue using .env files when deploying with Heroku, or perhaps deployment in general. At least this solved my problem of the API key being revealed in the Network tab, but I can’t upload my exact server.js file to github. Until I figure out a better way, my server.js file on github is modified so the API key is not shown.&lt;/p&gt;

&lt;p&gt;Also, the original news API I had decided to use - NewsAPI.org, which gave me the idea for this project in the first place - changed their rules for the free developer plan earlier in 2020. You cannot get data if the API is being called from anything other than localhost (so it doesn’t work when deployed), and the API keys expire after one month. It is just meant for developers to test out the API before paying for it, which I believe is a cost of about $400 per month.&lt;/p&gt;

&lt;p&gt;I had already spent a long time building the project using this API and was very disappointed when I deployed and found this out. Thankfully I found GNews.io, which I fit into my app with very little extra work. If I’m being honest, I think I actually like it better than NewsAPI.org. The data seems cleaner and there are not as many articles missing images. This data looks better on my cards so I think it worked out for the best.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;For now this is all I can remember. It was a difficult project but I’m happy I pushed through, because I ended up with this finished product: https://react-science-news.herokuapp.com/&lt;/p&gt;</content><author><name></name></author><category term="react" /><category term="node.js" /><summary type="html">When I was in school we learned about fetching data from external APIs. At the time I found a news API where you could filter articles based on topic. Since I previously went to university and earned a science degree I thought it would be great to make an app for myself that gives me the latest science articles.</summary></entry><entry><title type="html">Deploying simple React app with Serverless / AWS</title><link href="http://localhost:4000/deploy-react-serverless-aws" rel="alternate" type="text/html" title="Deploying simple React app with Serverless / AWS " /><published>2020-10-29T18:30:00-06:00</published><updated>2020-10-29T18:30:00-06:00</updated><id>http://localhost:4000/deploy-react-serverless-aws</id><content type="html" xml:base="http://localhost:4000/deploy-react-serverless-aws">&lt;p&gt;I am learning Serverless and AWS for work. Here is what I did to deploy a basic app with Serverless.&lt;/p&gt;

&lt;p&gt;This is assuming you already have an AWS account, and have installed Serverless, the AWS SDK, and set up your AWS credentials on your machine.Simply put, though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To install Serverless I ran this command: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i serverless -g&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;To install the AWS SDK I ran this command: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i aws-sdk -g&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Once you’ve set up an AWS account you can set up a new user in IAM, and save your credentials on your machine. &lt;a href=&quot;https://www.youtube.com/watch?v=w-OHgML58eg&amp;amp;t=1s&quot;&gt;This video shows that set-up&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case I already had a project made, which I set up using &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt;. You can also set up a new serverless app by creating a new folder and running &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless create --template aws-nodejs&lt;/code&gt;. This is assuming you are using Node.js in the backend. There are many different runtimes you can use and templates available. You can also run &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; after creating your serverless template. The order you do this doesn’t seem to matter, as long as you have all the files you need.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.serverless.com/framework/docs/providers/aws/guide/services/&quot;&gt;This article from Serverless explains services, and all associated files, very well&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To deploy static pages to an S3 bucket on AWS, I installed serverless-finch in my project using &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i --save-dev serverless-finch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When deploying a React app it is important to run the command &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;, so you get a build folder in your project directory. This is where all your static files end up including your index.html, which S3 needs to find in order to deploy your site.&lt;/p&gt;

&lt;h3 id=&quot;inside-the-serverlessyml-file&quot;&gt;Inside the serverless.yml file&lt;/h3&gt;

&lt;p&gt;Setting up a new serverless app will give you a handler file (in my case, handler.js), a .gitignore, and a serverless.yml file. serverless.yml is where you configure your service. Serverless uses this file to work with AWS to deploy your app.&lt;/p&gt;

&lt;p&gt;The following is what I have in my serverless.yml file:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;react-practice&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aws&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${opt:stage, 'dev'}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nodejs12.x&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;us-west-2&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;functions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;handler.hello&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#    The following are a few example events you can configure&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#    NOTE: Please make sure to change your handler code to work with those events&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#    Check the event documentation for details&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;get&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;serverless-finch&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bucketName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;julia-practice-react1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;distributionFolder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;errorDocument&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“service” essentially means project. It’s where you define all your functions, resources, events, plugins, and so on. Here you give the service a name.&lt;/p&gt;

&lt;p&gt;Under “provider” is where you specify that you are using AWS and configure your runtime, region, stage, etc. Stage refers to stage of development which includes development, QA, or production. Here the “dev” stage is default, if you don’t specify a stage when you deploy.&lt;/p&gt;

&lt;p&gt;Under each function you can have events. These are events that trigger the function to execute. In this example, and HTTP “get” request is triggering the “hello” function to execute.&lt;/p&gt;

&lt;p&gt;If you have a “resources” section, these are the resources that your functions use when they execute. These could include database tables.&lt;/p&gt;

&lt;p&gt;Note that under “plugins” I added “serverless-finch”.&lt;/p&gt;

&lt;p&gt;Under “custom” and “client” we configure S3.&lt;/p&gt;

&lt;p&gt;bucketName the bucket where S3 will place our files. It must be a globally unique name, meaning no one else in the world have have a bucket with this name.&lt;/p&gt;

&lt;p&gt;distributionFolder is where S3 should look for our files. For React we use “/build”, since that’s where our index.html is.&lt;/p&gt;

&lt;p&gt;S3 also requires you have an errorDocument specified. Since this is just a simple app I didn’t make one and just left it as index.html.&lt;/p&gt;

&lt;h4 id=&quot;what-serverless-does-with-the-serverlessyml-file&quot;&gt;What Serverless does with the serverless.yml file&lt;/h4&gt;

&lt;p&gt;Serverless takes the serverless.yml file and translates it into an AWS CloudFormation template.&lt;/p&gt;

&lt;p&gt;CloudFormation is an AWS service that allows you to manage all your AWS services/resources. You would write a template describing everything you want, and CloudFormation configures it for you.&lt;/p&gt;

&lt;p&gt;This sounds like an improvement over configuring everything yourself in the AWS management console, though these files can still get pretty long and take time to create. That’s where Serverless comes in. Serverless takes your serverless.yml file and creates CloudFormation templates for you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.serverless.com/framework/docs/providers/aws/guide/deploying/&quot;&gt;Here’s an article describing deployment with Serverless&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;deployment&quot;&gt;Deployment&lt;/h3&gt;

&lt;p&gt;Note: you can set up different commands in the “scripts” section of your package.json file.&lt;/p&gt;

&lt;p&gt;For backend stuff, especially for Lambda functions, run &lt;code class=&quot;highlighter-rouge&quot;&gt;sls deploy --aws-profile={whatever name you set up in your aws credentials file}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To deploy the client side, into your S3 bucket, run this command &lt;code class=&quot;highlighter-rouge&quot;&gt;sls client deploy --aws-profile={whatever name you set up in your aws credentials file}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your screen should look something like this if successful. You will see a link you can go to and view the site.
&lt;img src=&quot;../assets/images/sls-cli.jpg&quot; style=&quot;max-width: 500px;&quot; alt=&quot;serverless cli successful&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;errors&quot;&gt;Errors&lt;/h3&gt;

&lt;p&gt;I got an error reading “Serverless Error: Access Denied”. This seemed strange because I never got this error for the backend deploy, so I thought it must have to do with S3. I fixed this by making my bucket public, but I don’t think this is very secure so I need to look into this further.&lt;/p&gt;

&lt;p&gt;Another error said that I was not in the correct region. This was because my bucket and my serverless.yml file “region” did not match. I just had to quickly update my .yml file and there error was solved. I could now see my site.&lt;/p&gt;</content><author><name></name></author><category term="react" /><category term="aws" /><category term="serverless" /><summary type="html">I am learning Serverless and AWS for work. Here is what I did to deploy a basic app with Serverless.</summary></entry><entry><title type="html">How I configured ESLint and Prettier for React at work</title><link href="http://localhost:4000/eslint-prettier-react" rel="alternate" type="text/html" title="How I configured ESLint and Prettier for React at work " /><published>2020-10-29T17:30:00-06:00</published><updated>2020-10-29T17:30:00-06:00</updated><id>http://localhost:4000/eslint-prettier-react</id><content type="html" xml:base="http://localhost:4000/eslint-prettier-react">&lt;p&gt;At work we are doing some set-up on our projects so we can work better as a team, especially as we grow. It made sense to look into linting and formatting we can use across our projects, so our code is consistent and we don’t have to spend time thinking about correct formatting as we code.&lt;/p&gt;

&lt;p&gt;We decided we wanted to implement ESLint for linting (looking for code quality issues) and Prettier for formatting (code format/style like quotes, tabs, etc). We specifically wanted to add config files to the projects where we can store our settings, so the settings are just there in our project and we don’t have to change too many settings in our code editor.&lt;/p&gt;

&lt;p&gt;For this set-up you need to install the packages locally in your project, and install the extensions directly in your editor updating a couple settings.&lt;/p&gt;

&lt;p&gt;Since we use React I made an example project of how you set up ESLint and Prettier from a brand new React project. The steps I followed are below, as well as some other info, some of which is copied from my work document.&lt;/p&gt;

&lt;h3 id=&quot;steps&quot;&gt;Steps&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Create folder for new app and open in VS Code&lt;/li&gt;
  &lt;li&gt;Open terminal and run command &lt;code class=&quot;highlighter-rouge&quot;&gt;npx create-react-app . &lt;/code&gt; to create app directly in your folder&lt;/li&gt;
  &lt;li&gt;Go to “Extensions” tab and install “ESLint” and “Prettier - Code formatter” in VS Code&lt;/li&gt;
  &lt;li&gt;Install packages locally; run this command in the terminal: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i --save-dev eslint prettier eslint-config-prettier eslint-plugin-prettier&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Note: ESLint React plugins come pre-installed with create-react-app&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Add Prettier config file
    &lt;ul&gt;
      &lt;li&gt;“.prettierrc”&lt;/li&gt;
      &lt;li&gt;Inside the file add a JSON object, your Prettier rules will go here&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Add ESLint config file
    &lt;ul&gt;
      &lt;li&gt;“.eslintrc.json”&lt;/li&gt;
      &lt;li&gt;Add empty JSON object&lt;/li&gt;
      &lt;li&gt;Add “extends” section with the following: &lt;code class=&quot;highlighter-rouge&quot;&gt;“extends”: [“eslint:recommended”, “react-app”]&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;“React-app” extends the React rules that are already included with create-react-app&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Go to File -&amp;gt; Preferences -&amp;gt; Settings ( or Ctrl + , ) to update settings for Prettier extension
    &lt;ul&gt;
      &lt;li&gt;Text Editor -&amp;gt; Formatting -&amp;gt; check “Format on Save”&lt;/li&gt;
      &lt;li&gt;Ensure “Format on Save Mode” is set to “File”&lt;/li&gt;
      &lt;li&gt;In the search bar search for“default formatter” and in the dropdown select “esbenp.prettier-vscode”
        &lt;ul&gt;
          &lt;li&gt;This allows prettier to format all our file types&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;eslint-can-extend-prettier-rules&quot;&gt;ESLint can extend Prettier rules&lt;/h3&gt;

&lt;p&gt;You can set up ESLint to give you warnings when your Prettier options are not being followed. We decided not to go with this for now, because we found that they were quite distracting when working in your editor. However, this is what you would need in your .eslintrc.json file if you wanted that:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;extends&quot;: [&quot;eslint:recommended&quot;, &quot;react-app&quot; / &quot;prettier&quot;], &quot;plugins&quot;: [&quot;prettier&quot;],&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;husky-for-git&quot;&gt;Husky for git&lt;/h3&gt;

&lt;p&gt;We can use Husky to lint our code before we commit our code with git.&lt;/p&gt;

&lt;p&gt;Install Husky with the following command: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i husky --save-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In our package.json, we want to have this in our scripts, so we can run it in the command line:
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;scripts&quot;: { &quot;lint&quot;: &quot;eslint .&quot; }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And include this Husky config as well:
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;husky&quot;: { &quot;hooks&quot;: { &quot;pre-push&quot;: &quot;npm run lint&quot; } }&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://prettier.io/docs/en/install.html&quot;&gt;Prettier Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://eslint.org/docs/user-guide/getting-started&quot;&gt;ESLint Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bfyI9yl3qfE&quot;&gt;Helpful youtube tutorial&lt;/a&gt; - NOTE I did not follow this exactly, but it helped me to learn how ESLint and Prettier can be set up with create-react-app&lt;/p&gt;</content><author><name></name></author><category term="react" /><category term="devops" /><summary type="html">At work we are doing some set-up on our projects so we can work better as a team, especially as we grow. It made sense to look into linting and formatting we can use across our projects, so our code is consistent and we don’t have to spend time thinking about correct formatting as we code.</summary></entry><entry><title type="html">How to fully delete Visual Studio Code from Windows 10</title><link href="http://localhost:4000/how-to-fully-delete-vscode" rel="alternate" type="text/html" title="How to fully delete Visual Studio Code from Windows 10" /><published>2020-10-27T14:30:00-06:00</published><updated>2020-10-27T14:30:00-06:00</updated><id>http://localhost:4000/how-to-fully-delete-vscode</id><content type="html" xml:base="http://localhost:4000/how-to-fully-delete-vscode">&lt;p&gt;Recently I was messing around in my VS Code settings trying to get some new extensions to work. Long story short, I was following along with a tutorial, clicked a few things I probably shouldn’t have, and suddenly I could not see the settings UI screen.&lt;/p&gt;

&lt;p&gt;I figured it would be best to just uninstall VS Code and start over fresh, so I went to “Add or remove programs” in system settings to uninstall the program. Seemed simple enough, but when I re-installed VS Code, all my extensions were still there, and my settings were still not right.  So VS Code must be saving data elsewhere on the machine and it is not being deleted when the program is uninstalled.&lt;/p&gt;

&lt;p&gt;I spent some time navigating my PC’s files to determine where the program files were kept, but all it really took was a quick Google search to find some helpful answers.&lt;/p&gt;

&lt;p&gt;To be extra sure, as I found myself confused for the first time about the folder stucture of my PC, I went over a couple different pages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;one on &lt;a href=&quot;https://stackoverflow.com/questions/47689536/uninstall-visual-studio-code-in-windows&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;another on &lt;a href=&quot;https://superuser.com/questions/1380208/how-to-completely-uninstall-visual-studio-code-from-windows-10&quot;&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll list what I did below. It may be overkill, but when I reinstalled VS Code afterwards I had a clean slate; no more extensions and default settings.&lt;/p&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I did&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files\Microsoft VS Code&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;unins000.exe&lt;/code&gt; and uninstall VS Code&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;%AppData%\Code&lt;/code&gt; and delete the Code folder&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;%UserProfile%\.vscode&lt;/code&gt; and delete .vscode folder&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;%AppData%\Local\Programs\Microsoft VS Code&lt;/code&gt; and delete this folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Basically delete any files having to do with VS Code, and it should get rid of any VS Code data lurking around on your machine.&lt;/p&gt;</content><author><name></name></author><category term="devops" /><summary type="html">Recently I was messing around in my VS Code settings trying to get some new extensions to work. Long story short, I was following along with a tutorial, clicked a few things I probably shouldn’t have, and suddenly I could not see the settings UI screen.</summary></entry><entry><title type="html">Usability - notes from design course</title><link href="http://localhost:4000/usability" rel="alternate" type="text/html" title="Usability - notes from design course" /><published>2020-09-07T14:30:00-06:00</published><updated>2020-09-07T14:30:00-06:00</updated><id>http://localhost:4000/usability</id><content type="html" xml:base="http://localhost:4000/usability">&lt;p&gt;I am back working on my Udemy course, “Master Digital Product Design: UX Research and UI Design”. In this post I will add some notes on usability.&lt;/p&gt;

&lt;p&gt;Usability Heuristics, I have learned, is a way of saying “rule of thumb”.  So these are not usability rules exactly; they are usability suggestions and best practices.&lt;/p&gt;

&lt;p&gt;While going through these lectures I have been cringing a bit. Recently I realized I am becoming more interested in and passionate about good user experience and easing frustration for the user. The designer in me knows how important these points are. However, I know I have broken some of these best practices as a developer.  It has been difficult for me to implement my features in the best possible way when task requirements are unclear, on large systems I did not create myself. I came across roadblocks and had to get around them somehow, and then I was irritated with myself for not implementing the feature in the “best” way. But in those sitations, I did what I could.&lt;/p&gt;

&lt;p&gt;Nevertheless, I’m still enjoying learning about UX and UI.&lt;/p&gt;

&lt;h2 id=&quot;useful-links&quot;&gt;Useful links&lt;/h2&gt;

&lt;p&gt;This site &lt;a href=&quot;http://ui-patterns.com/patterns&quot;&gt;UI-patterns.com&lt;/a&gt; has in-depth descriptions and examples of many design patterns you see in user interface design, including cards, modals, dropdown menus, and more.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://contrastchecker.com/&quot;&gt;contrast checker&lt;/a&gt; site allows you to check the foreground and background colors on your site against various conditions, to make sure the level of contrast is acceptable. You could use this while auditing your sites.&lt;/p&gt;

&lt;h2 id=&quot;usability-heuristics&quot;&gt;Usability Heuristics&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Visibility: &lt;/strong&gt; (of system status) includes the idea of instant feedback - does a button instantly change when clicked? Is there a loading bar/spinner when a file is downloading?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System and real world matching: &lt;/strong&gt; does the language used sound like how we speak in real life? Or in the industry the software is used in?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User control and freedom: &lt;/strong&gt; can the user easily escape their previous action? Nothing we build is fully intuitive and the user will make mistakes. Can you reset, undo, go back? This allows users to explore and experiment, since they won’t be afraid of clicking and making irreversible mistakes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consistency and standards: &lt;/strong&gt; does it use existing conventions and standards used on other sites? Does it follow design patterns we typically see on websites? Some examples are hamburger icons for menus, paper clip icons for attachments, and shopping cart icons on e-commerce sites. Sites can also create their own standards - for example, Google uses different colored buttons for different functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Error prevention: &lt;/strong&gt; warn users if they are going to perform a significant action, like clearing a form. Or prevent an action altogether.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recognition rather than recall: &lt;/strong&gt; storing important information on the screen rather than making the user remember. For example, highlighting what page they’re on or category they are in so they don’t have to remember where they are in the site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flexibility and efficiency of use: &lt;/strong&gt; making the software easier to use for advanced users, so they can quickly finish routine tasks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aesthetics and minimalism: &lt;/strong&gt; you want the minimal amount of things on the screen, so we don’t overload the user’s working memory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Help recognize, diagnose, and recover from errors: &lt;/strong&gt; do we tell users about the errors clearly, and can they easily find the solutions?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Help and documentation: &lt;/strong&gt; is there help available and can users find where it is? Are the steps clear?&lt;/p&gt;

&lt;h2 id=&quot;usability-audits&quot;&gt;Usability audits&lt;/h2&gt;

&lt;p&gt;These are different from usability heuristics. Heuristics are vague, but an audit is more of a checklist. These are rules you come up with as part of your design process. Creating the audit can be time-consuming, but filling it out should be relatively quick and simple. Audits should contain specific yes or no questions that anyone can fill in while reviewing the product. No opinions should be allowed.&lt;/p&gt;

&lt;p&gt;Example questions on the checklist (from a real checklist shown in the course):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Does every display begin with a title or header that describes screen contents?&lt;/li&gt;
  &lt;li&gt;Is there visual feeback in menus or dialog boxes about which choice the cursor is on now?&lt;/li&gt;
  &lt;li&gt;Is the current status of an icon clearly indicated?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;It is often recommended that testing be done often, and that everyone in your company should observe users using the software regularly. Programmers, managers, everyone else; everyone involved with the product should observe the software being used.&lt;/p&gt;

&lt;p&gt;Don’t just ask users what they like. They will start to post-rationalize reasons why they like or dislike it, and start coming up with their own solutions. They will think about what would be useful in a hypothetical situation. But that’s not actually very useful for us. It’s important to &lt;em&gt;observe&lt;/em&gt; them using it.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;usability test&lt;/strong&gt; is when you give a user a task and observe what they do. You look for responses in their faces, and you need to be impartial and not influence the user’s behavior. Get users to talk out their thought process while using the product - that way you don’t have to guess.&lt;/p&gt;

&lt;p&gt;Reasons to do usability testing with experienced users as well as new users:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;experienced users may not even be experts in the software; users often fiddle their way through until they complete what they need to do, without mastering the product&lt;/li&gt;
  &lt;li&gt;products tested with only first time users can sometimes be set up really well to guide users through set up and early stages, but tasks they attempt later on may be very frustrating because they haven’t been given as much attention&lt;/li&gt;
  &lt;li&gt;existing customers are very valuable, more so than new customers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Test as early as you can! Don’t wait until you have a finished design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Click testing: &lt;/strong&gt; a quantitative method for testing, where users are given a task and you can see where they click in your design&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;you can test a large number of people and get data about how they are navigating your product&lt;/li&gt;
  &lt;li&gt;however, you just don’t know how they were feeling while they were going the test, so it is hard to gauge the reason they clicked where they did, and how big of a problem it is when a user does something “incorrectly”&lt;/li&gt;
  &lt;li&gt;a site you can use for this is &lt;a href=&quot;https://usabilityhub.com/&quot;&gt;usabilityhub.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="design" /><summary type="html">I am back working on my Udemy course, “Master Digital Product Design: UX Research and UI Design”. In this post I will add some notes on usability.</summary></entry><entry><title type="html">Dealing with memory leaks</title><link href="http://localhost:4000/memoryleaks" rel="alternate" type="text/html" title="Dealing with memory leaks" /><published>2020-08-10T18:30:00-06:00</published><updated>2020-08-10T18:30:00-06:00</updated><id>http://localhost:4000/memoryleaks</id><content type="html" xml:base="http://localhost:4000/memoryleaks">&lt;p&gt;While working on a particularly difficult task at work I ended up learning a lot about memory leaks.&lt;/p&gt;

&lt;p&gt;I am actually still working on this task.  To summarize, I needed to create a button that copies items in a table. We are using the javascript library Knockout.js.&lt;/p&gt;

&lt;p&gt;Knockout.js came out in 2010 before other similar libraries like React had come onto the scene. It was very promising at the time and gained a lot of interest from developers because it was able to observe the UI for changes from the user.&lt;/p&gt;

&lt;p&gt;I am still getting to know Knockout and React, but so far I have found my experience with React to be a more pleasant one. React just makes more sense to me in how the library is used and structured, and it is more optimized for performance.  Knockout, on the other hand, is not fully optimized in this regard and there are very specific, advanced fixes required to solve the problems you may face.&lt;/p&gt;

&lt;p&gt;I am not meaning to bash Knockout, and I am sure there is more for me to learn to improve my experience with it, but I do find it unnecessarily frustrating at times.&lt;/p&gt;

&lt;p&gt;So, back to my specific issue.&lt;/p&gt;

&lt;p&gt;I figured out the original logic for my button early on when I was assigned this task. To be honest even this took me a while; deciphering other peoples’ (uncommented!) code is what proved to be the most challenging aspect at that point in time. It was basically two nested loops - the outer loop determines where in the table the &lt;em&gt;set&lt;/em&gt; of copies will go, and the inner loop inserts the &lt;em&gt;individual&lt;/em&gt; copies into the correct place in the table.  This worked great on small tables, let’s say smaller than 20 items. But once I started using it on tables that contained 100s of items, the browser crashed. It ran out of memory.&lt;/p&gt;

&lt;p&gt;My classmates from my web dev program suggested a while back, for a different task, that I get to know the chrome developer tools. I decided to go more in depth and start learning how to use the performance profiler and the memory tab. I also started doing more research into memory leaks in general and this is what I learned.&lt;/p&gt;

&lt;h3 id=&quot;javascript-memory-management&quot;&gt;Javascript memory management&lt;/h3&gt;

&lt;p&gt;Javascript automatically manages memory, allocating slots of memory when you declare variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Garbage collection(GC)&lt;/strong&gt; is automatic memory management, which monitors how memory is being allocated, and reclaims memory that is no longer being used. Javascript uses GC, where other languages like C and C++ do not have this built in. You have to allocate memory manually when using these languages.&lt;/p&gt;

&lt;p&gt;But just because javascript has garbage collection doesn’t mean you will never encounter issues with memory.&lt;/p&gt;

&lt;p&gt;Javascript and GC algorithms keep track of references.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reference counting: if an object has no other objects referencing it, it is no longer needed. It is sent to the garbage.&lt;/li&gt;
  &lt;li&gt;Circular references: if you have references referring to each other. They can never be garbage collected. Even if the values are deleted, the references still exist in memory.&lt;/li&gt;
  &lt;li&gt;Mark and sweep algorithm: instead of looking at which objects are no longer needed, objects that are “no longer reachable” are garbage collected. It starts from the javascript root and works its way outward, finding all the references from there. If something cannot be reached in this case, it is garbage collected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you look at your memory graph in dev tools, when analyzing performance, you may see a saw-tooth pattern. This can sometimes indicate a memory leak, because the javascript heap keeps increasing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heap:&lt;/strong&gt; the pool of memory used to satisfy requests for memory&lt;/p&gt;

&lt;h3 id=&quot;how-my-issue-was-solved&quot;&gt;How my issue was solved&lt;/h3&gt;

&lt;p&gt;I spent a lot of time just learning about memory and was pretty stuck.  Of course, the examples from the dev tools instructions are pretty simple, but the application I’m working on is complex. I sent some of my performance profiles and heap snapshots to one of the senior devs. He said that it looked like too many &lt;em&gt;subscriptions&lt;/em&gt; are being made, and few are being &lt;em&gt;disposed&lt;/em&gt; of.&lt;/p&gt;

&lt;p&gt;In knockout, you can &lt;strong&gt;subscribe&lt;/strong&gt; to elements in your UI so you will be notified of any changes. Subscriptions can also be &lt;strong&gt;disposed&lt;/strong&gt; of when they are no longer needed.  It looked like I had to manually make these fixes, while they are most often taken care of automatically in the background.&lt;/p&gt;

&lt;p&gt;What was happening was, every time we were making a new copy in the table, a new subscription was being made, and this was taking up space in memory. This is because we were adding new copies to an observable array, not a plain javascript array.&lt;/p&gt;

&lt;p&gt;To fix this, we:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;copied the observable array with all the original data into a new regular javascript array&lt;/li&gt;
  &lt;li&gt;added the new copies to the regular array&lt;/li&gt;
  &lt;li&gt;replaced the content of the observable array with the contents of the regular array; this is the stage when the subscription occured&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, we had only one subscription event, rather than a potential 100 or 1000. The speed improved dramatically.&lt;/p&gt;

&lt;p&gt;There are still a number of bugs to work out with this task, but I learned a lot about memory management just from working on these issues.&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><category term="debugging" /><category term="memory" /><summary type="html">While working on a particularly difficult task at work I ended up learning a lot about memory leaks.</summary></entry><entry><title type="html">UX design notes part 3</title><link href="http://localhost:4000/ux-3" rel="alternate" type="text/html" title="UX design notes part 3" /><published>2020-07-22T19:30:00-06:00</published><updated>2020-07-22T19:30:00-06:00</updated><id>http://localhost:4000/ux-3</id><content type="html" xml:base="http://localhost:4000/ux-3">&lt;p&gt;Optimal Sort: helps you with information architecture, card sorting&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;test how people think content should be organized&lt;/li&gt;
  &lt;li&gt;test with lots of people&lt;/li&gt;
  &lt;li&gt;can do this manually with paper cards and in person&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.optimalworkshop.com/optimalsort/&quot;&gt;Optimal sort found here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4:1 worksheet for wireframing&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;draw four different ideas for how a page might work, then take the one you like the best (for whatever reason) and draw it in one box&lt;/li&gt;
  &lt;li&gt;can do this for each section of your website that you got from your information architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wireframes&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Balsamiq is a good tool, partly because of the hand-drawn look
    &lt;ul&gt;
      &lt;li&gt;hand drawn looks unfinished, so people will not get too attached and think it’s the final product&lt;/li&gt;
      &lt;li&gt;looking good and having an aesthetic draws people to it. Aestheics are important. If it doesn’t look good, people won’t like it and they won’t use it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perception&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;to improve perception skills, think of something that you firmly believe is correct, and think of an argument for why it is incorrect&lt;/li&gt;
  &lt;li&gt;logic is the enemy of perception, it tells us we already know the answer; perception makes us go out and look for more answers&lt;/li&gt;
  &lt;li&gt;we perceive a small amount of the world around us - our brain is interpreting what we see&lt;/li&gt;
  &lt;li&gt;don’t want to assume the user is seeing everything on the page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can design applications for a focused or diffused state of thinking&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google is for a focused state; it is minimal, not a lot of distractions, has pagination&lt;/li&gt;
  &lt;li&gt;YouTube is for a diffused state, when you are looking to browse and be distracted; lots to grab you attention, infinite scroll, lots of ads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Memory&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Iconic memory: in our eye, fast and short, picks up patterns, light, colors&lt;/li&gt;
  &lt;li&gt;Filters: only see what we are looking for, decides whether we should pay attention to it&lt;/li&gt;
  &lt;li&gt;Working memory: can only hold a few things at once, finite, only add to it if it’s really important because we need to take something else out to add it in&lt;/li&gt;
  &lt;li&gt;Long term memory: for a lifetime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Visual encoding channels: things that make items stand out&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;position, color, size, shape, texture, gradient, angle&lt;/li&gt;
  &lt;li&gt;color: hue, brightness differences&lt;/li&gt;
  &lt;li&gt;position most important - why we make wireframes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hierarchy&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;determining how important something is&lt;/li&gt;
  &lt;li&gt;headings big, meta-information small&lt;/li&gt;
  &lt;li&gt;you can only pay attention to one thing at once&lt;/li&gt;
  &lt;li&gt;you can’t make everything on the page the most important thing&lt;/li&gt;
  &lt;li&gt;assign items on a page with a hierarchy score&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pre-attentive channels: channels we can identify without focusing our attention on them directly&lt;/p&gt;</content><author><name></name></author><category term="design" /><summary type="html">Optimal Sort: helps you with information architecture, card sorting</summary></entry><entry><title type="html">UX design notes part 2</title><link href="http://localhost:4000/ux-2" rel="alternate" type="text/html" title="UX design notes part 2" /><published>2020-07-09T19:30:00-06:00</published><updated>2020-07-09T19:30:00-06:00</updated><id>http://localhost:4000/ux-2</id><content type="html" xml:base="http://localhost:4000/ux-2">&lt;p&gt;More notes from my Udemy course in UX design.&lt;/p&gt;

&lt;h3 id=&quot;design-process&quot;&gt;Design process&lt;/h3&gt;

&lt;p&gt;The instructor reiterated that this is about coming up with the process that works best for you and not to copy another designer’s style. Make changes however you see fit.&lt;/p&gt;

&lt;p&gt;There are four main steps in most processes: research (empathize), analyze (your reserach), ideate (generate ideas), test.&lt;/p&gt;

&lt;p&gt;Mistakes people make/things people don’t realize:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;there is a design process; need to do research, come up with ideas, etc. One can’t just come up with an idea on the spot, work needs to go into it, and that takes the form of your design process.&lt;/li&gt;
  &lt;li&gt;need to have an excess of research before you analyze, and need excess of ideas before you test them; it’s imporant to be aware of as many problems that you are facing as possible, so you can proritize the most imporant ones. Solving some problems can also cause problems in other areas.&lt;/li&gt;
  &lt;li&gt;each of these design phases require different types of thinking; &lt;strong&gt;divergence and convergence&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Research and ideation are divergent, quantity over quantity, need to gather lots of data
Analysis and testing are convergent, need to focus on most important details, lots of time to think&lt;/p&gt;

&lt;h3 id=&quot;critical-thinkingdesign-thinking&quot;&gt;Critical thinking/design thinking&lt;/h3&gt;

&lt;p&gt;Scandinavian cooperative design: Scandinavian designers actually worked with the people they were building software for. The workers essentially helped to design the software they were going to use.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this type of process is more about perception, rather than a “scientific” or rational thinking kind of process&lt;/li&gt;
  &lt;li&gt;often re-packaged as “design thinking”, boiled down to process steps; these short courses don’t usually help you to become a better designer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Innovation theatre: the appearance of being innovative without actually having interest in a better user experience; more for show, for stakeholders, etc&lt;/p&gt;

&lt;p&gt;Design is about &lt;strong&gt;thinking&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it’s important to improve your preception, creativity skills, and listen more&lt;/li&gt;
  &lt;li&gt;decisions come from emotions rather than rational thinking&lt;/li&gt;
  &lt;li&gt;book recommendation was Six Thinking Hats - to learn about different ways of thinking&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;experience&quot;&gt;Experience&lt;/h3&gt;

&lt;p&gt;We can get people to buy products by saving them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;time&lt;/li&gt;
  &lt;li&gt;money&lt;/li&gt;
  &lt;li&gt;space&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the cost of any of these is too high it is no longer worth it.&lt;/p&gt;

&lt;p&gt;These days, improving the experience of a product is more important.&lt;/p&gt;

&lt;p&gt;It’s important to look at the emotional responses that people have to various tasks in their lives&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;e.g. Tinder - online dating full of rejection and emotional pain, Tinder takes the rejection out of it by having “matches” and includes the experience of “swiping” people out of your life or into your life
    &lt;ul&gt;
      &lt;li&gt;good experience, however not in the long term&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Focusing on making something a good experience does not make it inherently good. A cheeseburger is a good experience, but is not good &lt;em&gt;for&lt;/em&gt; you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://humanetech.com/&quot;&gt;Center for Humane Technology&lt;/a&gt;: organization that wants to make things that are good for people, rather than focusing on a good experience&lt;/p&gt;

&lt;p&gt;People like to talk about things that are easy to articulate. But sometimes it’s more important to address the things that are difficult to talk about.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perception&lt;/strong&gt; is important. If someone says it took too long to do something on your site, it’s likely they just don’t like your site. It doesn’t matter how long it actually took them - if they perceived it to take too long it is a problem. People’s experiences are not rooted in reality. These things can be difficult to articulate to your coworkers; talking about things like the number of clicks to a particular part of a site is easy.&lt;/p&gt;

&lt;p&gt;People like to feel in control. They like to know how long it will be until the Uber or train arrives, and will more happily wait when they know what to expect. If your site responds when you click a button, or you let the user know that something is loading, they will be more patient with your site&lt;/p&gt;

&lt;p&gt;Software design isn’t all about usability - creativity is important too.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;e.g. TV remote - if you take away some buttons from your TV remote, you should replace them with something unique and interesting. If you just take buttons away, people will think it’s less valuable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;creativity&quot;&gt;Creativity&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;TL;DR - creative people come up with lots and lots of ideas&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We value novel experiences, even if the things we have are fine as they are.&lt;/p&gt;

&lt;p&gt;Creativity: ability to generate novel solutions to a problem&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how many ideas you can come up with in a defined amount of time&lt;/li&gt;
  &lt;li&gt;judgement free, whatever comes to you; don’t try to overthink and figure out why something won’t work&lt;/li&gt;
  &lt;li&gt;you can’t be creative and rationalize at the same time&lt;/li&gt;
  &lt;li&gt;this is important to practice - the more you do it the better you get&lt;/li&gt;
  &lt;li&gt;your first idea is probably bad, and don’t want to get attached to an idea too early&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt; every day pick a problem and see how many solutions you can come up with in one minute&lt;/p&gt;

&lt;p&gt;Exercise: think of 100 uses for a potato, see how quickly you can do it&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;can do this for other things like a pin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Charles Darwin: sometimes unique traits help an animal survive, more than fitness&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;so don’t make your designs forgettable - you need some uniqueness for people to remember it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The things we love are imperfect and unique. Humans’ highest perception of value is creativity.&lt;/p&gt;

&lt;p&gt;It is important to write down or draw out your ideas. It gets them out of your working memory, freeing it up for the more interesting ideas underneath. Use paper and get away from the computer.&lt;/p&gt;

&lt;p&gt;“Good ideas are hidden under bad ideas”&lt;/p&gt;

&lt;p&gt;Important parts of your brain for creativity:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Central Executive Network - for focusing on a task&lt;/li&gt;
  &lt;li&gt;Default Mode Network - where you daydream and let your brain make new connections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most creative people use both of these parts of the brain at once or can switch between them quickly. Taking breaks is good, because that’s when you’re in default mode. A lot of ideas can come when you’re not in focused mode.&lt;/p&gt;

&lt;p&gt;Boundaries/limits make people more creative - Van Gogh used only a few colors in his paintings.&lt;/p&gt;

&lt;p&gt;Rory’s story cubes: roll them, come up with a story&lt;/p&gt;

&lt;p&gt;Post-its:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;not too much detail&lt;/li&gt;
  &lt;li&gt;gets people moving around the room&lt;/li&gt;
  &lt;li&gt;can combine your ideas easily&lt;/li&gt;
  &lt;li&gt;gets thrown away; ideas on their own aren’t valuable, don’t get attached to ideas too early&lt;/li&gt;
  &lt;li&gt;downside: innovation theatre; just because you have post-it notes doesn’t mean you are innovating, have to use them properly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Test ideas way before you’re ready&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;e.g. comedians testing out their jokes; cross out the bad jokes that don’t get many laughs
    &lt;ul&gt;
      &lt;li&gt;they create more jokes than most people, and they test them, not necessarily more funny than anyone else&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="design" /><summary type="html">More notes from my Udemy course in UX design.</summary></entry><entry><title type="html">Learning SQL Part 3</title><link href="http://localhost:4000/sql-part-3" rel="alternate" type="text/html" title="Learning SQL Part 3" /><published>2020-07-04T19:30:00-06:00</published><updated>2020-07-04T19:30:00-06:00</updated><id>http://localhost:4000/sql-part-3</id><content type="html" xml:base="http://localhost:4000/sql-part-3">&lt;p&gt;The previous post was getting a little long, so here is the last of the notes from my &lt;a href=&quot;https://www.youtube.com/watch?v=HXV3zeQKqGY&amp;amp;t=3445s&quot;&gt;freecodecamp course in SQL&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;triggers&quot;&gt;Triggers&lt;/h3&gt;

&lt;p&gt;A trigger is a block of SQL code that defines an action that should happen when a particular action is performed on a database. Like if something is deleted from the database, or something is inserted into a table.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;DELIMITER&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;TRIGGER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_trigger&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BEFORE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EACH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ROW&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger_test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'added new employee'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;DELIMITER&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;109&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Oscar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Martinez'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1968-02-19'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'M'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;69000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;106&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* SELECT * FROM trigger_test returns one row of 'added new employee' */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the start we are setting the delimiter to $$. Normally the delimiter is a semicolon, but because we are using it already inside the trigger, we need to create a new one to denote the end of the code. It is changed back after we are done creating the trigger. This trigger is saying whenever we insert into the employee table, add a string to the trigger_test table that says ‘added new employee’.&lt;/p&gt;

&lt;h3 id=&quot;entity-relationship-diagrams&quot;&gt;Entity relationship diagrams&lt;/h3&gt;

&lt;p&gt;Database schema: all the tables and attributes on the tables&lt;/p&gt;

&lt;p&gt;Entity relationship (ER) diagram: take data storage/business requirements and convert to a database schema, kind of a middle man&lt;/p&gt;

&lt;p&gt;Entity: object we want to model and store information about&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;e.g. Student&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Attributes: specific pieces of information about an entity&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;e.g. name, grade, gpa&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Composite attributes: are attributes that can be broken up into sub-attributes&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;e.g. first name, last name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Multi-valued attribute: can have more than one value&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;e.g. a student could be in multiple clubs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Derived attribute: can be derived from other attributes&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;e.g. a particular gpa could mean someone has honours&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Relationship attribute: an attribute about the relationship,stored on the relationship&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;e.g. a grade earned by taking a class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You define relationships between your entities&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;total participation: all members must participate in the relationship - e.g. all classes must be taken by at least one student&lt;/li&gt;
  &lt;li&gt;partial participation - e.g. not all students have to take a particular class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Relationship cardinality: the number of times an entity can be associated with the relation&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;e.g. a student can take many classes, a class can have many students&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Weak entity: depends on another entity, not uniquely identified by its own attributes alone. Doesn’t exist on its own.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;e.g. an exam must be associated with a class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Identifying relationship: relationship that identifies the weak entity&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the relationship between a class and an exam&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="sql" /><category term="database" /><summary type="html">The previous post was getting a little long, so here is the last of the notes from my freecodecamp course in SQL.</summary></entry></feed>