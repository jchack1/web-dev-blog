<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-29T22:51:18-07:00</updated><id>http://localhost:4000/</id><title type="html">Julia Hack</title><subtitle>Web development blog</subtitle><entry><title type="html">Problem solving strategy for code problems</title><link href="http://localhost:4000/algorithm-problem-solving" rel="alternate" type="text/html" title="Problem solving strategy for code problems" /><published>2025-01-29T16:30:00-07:00</published><updated>2025-01-29T16:30:00-07:00</updated><id>http://localhost:4000/algorithm-problem-solving</id><content type="html" xml:base="http://localhost:4000/algorithm-problem-solving">&lt;p&gt;I’m continuing to work on the JavaScript Algorithms and Data Structures course on Udemy. Here are some notes outlining the recommended problem solving strategy.&lt;/p&gt;

&lt;h3 id=&quot;what-is-an-algorithm&quot;&gt;What is an algorithm?&lt;/h3&gt;

&lt;p&gt;Essentially, a set of steps to accomplish a task.&lt;/p&gt;

&lt;h3 id=&quot;step-1-understanding-the-problem&quot;&gt;Step 1: Understanding the problem&lt;/h3&gt;

&lt;p&gt;Ask clarifying questions&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;can I restate in my own words?&lt;/li&gt;
  &lt;li&gt;what are the inputs?&lt;/li&gt;
  &lt;li&gt;what are the outputs?&lt;/li&gt;
  &lt;li&gt;can the outputs be determined from the inputs? do I have enough info already?&lt;/li&gt;
  &lt;li&gt;how should I label the important data?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-2-look-at-concrete-examples&quot;&gt;Step 2: Look at concrete examples&lt;/h3&gt;

&lt;p&gt;Can help you understand the problem, and whether your solution will work as you expect&lt;/p&gt;

&lt;p&gt;Some real life examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;user stories&lt;/li&gt;
  &lt;li&gt;unit tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How to do this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;write down simple examples with the inputs and outputs&lt;/li&gt;
  &lt;li&gt;then some more complex examples&lt;/li&gt;
  &lt;li&gt;now you have it and can look back on it as you work&lt;/li&gt;
  &lt;li&gt;think about edge cases, examples with empty inputs or invalid inputs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example: write a function which takes in a string and returns counts of each character in the string&lt;/p&gt;

&lt;p&gt;A couple simple examples: &lt;code class=&quot;highlighter-rouge&quot;&gt;charCount(&quot;aaaa&quot;) // {a: 4}&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;charCount(&quot;hello&quot;) // {h:1 e:1, l:2, o:1}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A question that comes to mind: do we want to have all the letters in the alphabet, and just increment the ones used? Like: {a: 0, b: 0, c: 0, …}. Or, only include the letters in the string. Would need to clarify this.&lt;/p&gt;

&lt;p&gt;More complex: &lt;code class=&quot;highlighter-rouge&quot;&gt;charCount(&quot;my phone number is 1234567890)&lt;/code&gt; - now we think, what do we do about spaces? What about numbers? Would we want this to return an error?&lt;/p&gt;

&lt;p&gt;Or &lt;code class=&quot;highlighter-rouge&quot;&gt;charCount(&quot;Hello&quot;)&lt;/code&gt; - are we storing uppercase and lowercase? Or converting uppercase to lowercase? Again, would need to clarify.&lt;/p&gt;

&lt;p&gt;What about empty strings and null values, like &lt;code class=&quot;highlighter-rouge&quot;&gt;charCount(&quot;&quot;)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;chartCount(null)&lt;/code&gt;- how do we handle it?&lt;/p&gt;

&lt;p&gt;This shows us how looking at different inputs can help understand how we need to solve the problem. Start with what seems simple, then the edge cases.&lt;/p&gt;

&lt;h3 id=&quot;step-3-break-it-down&quot;&gt;Step 3: Break it down&lt;/h3&gt;

&lt;p&gt;Write down the steps of the problem. Can use comments as your guide. Also, if you were in a code interview, you can ask them if you’re on the right track and get a hint.&lt;/p&gt;

&lt;p&gt;Helps you think about the code before you write it, and catch any issues before you start.&lt;/p&gt;

&lt;h3 id=&quot;step-4-solve-or-simplify&quot;&gt;Step 4: Solve or simplify&lt;/h3&gt;

&lt;p&gt;Solve the problem, and if you can’t, solve a simpler problem. Ignore what is giving you a hard time for a while, and focus on what you understand, then come back to it later. Often you’ll begin to understand the more difficult part as you go and you can come back to it.&lt;/p&gt;

&lt;p&gt;In addition, if it were during an interview, you’re not stuck at the beginning and running out of time with nothing to show for it. At least you solved the rest of the problem.&lt;/p&gt;

&lt;h3 id=&quot;step-5-look-back-and-refactor&quot;&gt;Step 5: Look back and refactor&lt;/h3&gt;

&lt;p&gt;Go line by line, talk about what you don’t like, how easy it is to understand.&lt;/p&gt;

&lt;p&gt;Ask these questions. If you were in an interview, ask them out loud&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;can you check the result?&lt;/li&gt;
  &lt;li&gt;can you derive the result differently?&lt;/li&gt;
  &lt;li&gt;google if there is a faster way of doing it&lt;/li&gt;
  &lt;li&gt;can you understand it at a glace? how intuitive and readable is it?&lt;/li&gt;
  &lt;li&gt;can you use this solution for another problem? reusability in your code is a good thing&lt;/li&gt;
  &lt;li&gt;can you improve the performance?&lt;/li&gt;
  &lt;li&gt;any other ways to refactor? does it follow the style guides of the company? is it formatted well?&lt;/li&gt;
  &lt;li&gt;how do others solve this problem? Even ask an interviewer this&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="computer-science" /><category term="problem-solving" /><category term="coding-problems" /><summary type="html">I’m continuing to work on the JavaScript Algorithms and Data Structures course on Udemy. Here are some notes outlining the recommended problem solving strategy.</summary></entry><entry><title type="html">Learning Git Workflows</title><link href="http://localhost:4000/github-workflows" rel="alternate" type="text/html" title="Learning Git Workflows" /><published>2024-12-27T16:30:00-07:00</published><updated>2024-12-27T16:30:00-07:00</updated><id>http://localhost:4000/github-workflows</id><content type="html" xml:base="http://localhost:4000/github-workflows">&lt;p&gt;In order to get a better idea of how to manage our branches in github at work, we took a LinkedIn Learning course on git workflows. Here are some notes I took during the course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git workflow:&lt;/strong&gt; an agreement amongst a dev team that defines how source code is managed&lt;/p&gt;

&lt;p&gt;There are already many established workflows you can pick from.&lt;/p&gt;

&lt;p&gt;The main building blocks of a workflow include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a shared repo&lt;/li&gt;
  &lt;li&gt;your local repo&lt;/li&gt;
  &lt;li&gt;branches&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;types-of-branches&quot;&gt;Types of branches&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Long-lived branches - remain open throughout the project
    &lt;ul&gt;
      &lt;li&gt;main: holds latest stable code, often holds latest code that has been released to prod&lt;/li&gt;
      &lt;li&gt;develop: branched off of main branch, used to integrate the next version of the code they plan to release, where team merges their work in progress&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Short-lived branches: exist for a short time, then merged
    &lt;ul&gt;
      &lt;li&gt;feature: for developing new feature&lt;/li&gt;
      &lt;li&gt;hotfix: used to fix critical issue, branched from main branch&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-workflow-examples&quot;&gt;Git workflow examples&lt;/h3&gt;

&lt;p&gt;Selecting the right git workflow for your needs depends on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;size of team&lt;/li&gt;
  &lt;li&gt;release cadence - how frequently do you release?&lt;/li&gt;
  &lt;li&gt;how much automation is involved in your process? CICD pipelines etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;git-flow&quot;&gt;Git flow&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;less modern, doesn’t do well with continuous delivery&lt;/li&gt;
  &lt;li&gt;good for less frequent releases, like monthly, quarterly, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Long lived branches:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;main - production ready and can be released&lt;/li&gt;
  &lt;li&gt;develop - all the development changes that are being worked on for the next release
    &lt;ul&gt;
      &lt;li&gt;where devs add their changes and pull the changes of their teammates&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Short lived branches&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;feature: branch from develop branch, for a single feature or bug, merged back into develop&lt;/li&gt;
  &lt;li&gt;release: branch off of develop branch
    &lt;ul&gt;
      &lt;li&gt;if you notice issues, patch features in the release branch&lt;/li&gt;
      &lt;li&gt;when ready, merge into the main branch, as well as develop, so develop has any patches that were made&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;hotfix: patch a production release, branch off main, apply fix, then merge it back into main and develop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can apply branch protection rules in github settings&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;example: require pull request before merging, require approvals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some helpful commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;to set up a branch to track a remote branch, is: &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b develop origin/develop&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;to push new branch, and set up tracking between local repo and shared repo, try adding -u flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin feature/jh-123-site-content -u&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Releasing to production&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;merge release branch into main&lt;/li&gt;
  &lt;li&gt;this can allow devs to keep working on the next release while the current release is getting ready&lt;/li&gt;
  &lt;li&gt;once this is done, need to merge the changes we made to release, into development, so each branch has everything&lt;/li&gt;
  &lt;li&gt;all you have to do is merge release into develop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hotfix&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if you need to fix something that has already been released to main, do a hotfix&lt;/li&gt;
  &lt;li&gt;branch new ‘hotfix’ branch off main&lt;/li&gt;
  &lt;li&gt;merge hotfix branch into main&lt;/li&gt;
  &lt;li&gt;then merge into develop so both have latest fix&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;github-workflow&quot;&gt;Github workflow&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;created by GitHub&lt;/li&gt;
  &lt;li&gt;main is only long-lived branch&lt;/li&gt;
  &lt;li&gt;no release or hotfix branches&lt;/li&gt;
  &lt;li&gt;high release cadence, it’s fine since you’re releasing maybe every few hours&lt;/li&gt;
  &lt;li&gt;branch off main locally, commit changes as they make progress, then push to remote feature branch, so they on’t lose their work&lt;/li&gt;
  &lt;li&gt;pull request into main&lt;/li&gt;
  &lt;li&gt;same thing for hotfixes - branch off main, merge back in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra safeguards you should have so github workflow is successful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;continuous integration&lt;/li&gt;
  &lt;li&gt;automated build and test during deployment&lt;/li&gt;
  &lt;li&gt;unit and integration tests&lt;/li&gt;
  &lt;li&gt;peer review&lt;/li&gt;
  &lt;li&gt;need approvers on pull requests&lt;/li&gt;
  &lt;li&gt;automated deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;trunk-based-development&quot;&gt;Trunk-based development&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;centers around single branch trunk(main)&lt;/li&gt;
  &lt;li&gt;no long-lived branches other than main&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Small teams with high release cadence:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;clone trunk locally, commit against trunk branch, then merge directly into shared repo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For large teams:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use short lived feature branches, like GitHub flow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Release strategies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;release directly from trunk - good for rapid pace&lt;/li&gt;
  &lt;li&gt;create release branch before each release, then devs can work directly off trunk without impacting release&lt;/li&gt;
  &lt;li&gt;hotfix: cherry-pick a single commit to merge into release branch&lt;/li&gt;
  &lt;li&gt;CICD is important, like in GitHub flow&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;feature-flags&quot;&gt;Feature flags&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;toggle availability of feature in your software, or under specific conditions&lt;/li&gt;
  &lt;li&gt;you could toggle a feature on for dev environemnts, but not prod, so devs can test it out&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deployment vs release&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;deployment pushes code into prod, but not available yet&lt;/li&gt;
  &lt;li&gt;release - it’s now available for the user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Strategies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;basic toggle&lt;/li&gt;
  &lt;li&gt;targeted - to certain user segments&lt;/li&gt;
  &lt;li&gt;rollout - increase % of users gradually&lt;/li&gt;
  &lt;li&gt;can be added with simple if statements, or with a library&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="git" /><category term="version-control" /><summary type="html">In order to get a better idea of how to manage our branches in github at work, we took a LinkedIn Learning course on git workflows. Here are some notes I took during the course.</summary></entry><entry><title type="html">Big O For JavaScript Objects and Arrays</title><link href="http://localhost:4000/object-array-efficiency" rel="alternate" type="text/html" title="Big O For JavaScript Objects and Arrays" /><published>2024-10-19T18:30:00-06:00</published><updated>2024-10-19T18:30:00-06:00</updated><id>http://localhost:4000/object-array-efficiency</id><content type="html" xml:base="http://localhost:4000/object-array-efficiency">&lt;p&gt;Quick post to summarize different operations on objects and arrays.&lt;/p&gt;

&lt;p&gt;This content came from a lesson in JavaScript Algorithms and Data Structures Masterclass on Udemy.&lt;/p&gt;

&lt;h3 id=&quot;objects&quot;&gt;Objects&lt;/h3&gt;

&lt;p&gt;Objects are unordered collections of key-value pairs. If you have the key, you can retrive the value immediately without searching the entire object. This is constant time, O(1).&lt;/p&gt;

&lt;p&gt;It’s the same thing for inserting new items. Order doesn’t come into play, you’re just adding a new item into the object, so it’s constant time.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.keys()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.entries()&lt;/code&gt;: since this converts an object to an array, so you can iterate over it, it is O(n) time. That’s because you have to go through every item in the object in order to create the new array.&lt;/p&gt;

&lt;p&gt;Objects are great for when order doesn’t matter and you just need to look things up.&lt;/p&gt;

&lt;h3 id=&quot;arrays&quot;&gt;Arrays&lt;/h3&gt;

&lt;p&gt;Arrays are more useful for when you need order and/or fast access. If you know the index of the item you’re looking for, you don’t have to search the whole array - you can retrieve it right away, making it constant time O(1).&lt;/p&gt;

&lt;p&gt;Searching the entire array is O(n), because we are considering the worst case scenario - that the item you’re looking for it at the very end, and you have to go through all the other items first.&lt;/p&gt;

&lt;p&gt;Insert or removing an item depends on &lt;em&gt;where&lt;/em&gt; in the array you are adding/removing from.&lt;/p&gt;

&lt;p&gt;If you are adding to the end (&lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt;) or removing from the end (&lt;code class=&quot;highlighter-rouge&quot;&gt;pop()&lt;/code&gt;), you don’t have to touch any other items in the array. These are constant time O(1).&lt;/p&gt;

&lt;p&gt;However, if you are adding (&lt;code class=&quot;highlighter-rouge&quot;&gt;unshift()&lt;/code&gt;) or removing (&lt;code class=&quot;highlighter-rouge&quot;&gt;shift()&lt;/code&gt;) from the beginning of the array, you now have to re-index every other item in that array.&lt;/p&gt;

&lt;p&gt;Let’s say you added one item to the beginning. It is now index 0. The next item in the array, that was previously index 0, now has to be re-indexed to 1. And so on. Since you are updating every item in the new array, time complexity is O(n).&lt;/p&gt;

&lt;p&gt;In general, any built in JavaScript method that acts on (potentially) every item of an array is O(n), including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;splice()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slice()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;concat()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;forEach()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt; is O(n log(n)) - because there are comparisons and other complex operations going on for each element in the array:&lt;/p&gt;</content><author><name></name></author><category term="computer-science" /><category term="data-structures" /><category term="javascript" /><summary type="html">Quick post to summarize different operations on objects and arrays.</summary></entry><entry><title type="html">Revisiting Data Structures and Algorithms - Big O Notation</title><link href="http://localhost:4000/big-o" rel="alternate" type="text/html" title="Revisiting Data Structures and Algorithms - Big O Notation" /><published>2024-10-19T17:30:00-06:00</published><updated>2024-10-19T17:30:00-06:00</updated><id>http://localhost:4000/big-o</id><content type="html" xml:base="http://localhost:4000/big-o">&lt;p&gt;I am learning about data structures and algorithms again.&lt;/p&gt;

&lt;p&gt;A while ago I wanted to try Leetcode to get better at solving code problems. It was good practice, but I found that if I picked random problems to work on, I could usually come with a solution, but the problems sometimes are testing your knowledge of specific algorithms. How am I supposed to get the “correct” answer if I have never studied the algorithm? I don’t want to just google the answer to every question, this defeats the whole purpose.&lt;/p&gt;

&lt;p&gt;I figured I should try learning more algorithms, and once I learn them, &lt;em&gt;then&lt;/em&gt; I should practice them.&lt;/p&gt;

&lt;p&gt;This time around for data structures and algorithms, I found a course that teaches this topic for JavaScript. The first lesson is on Big O Notation.&lt;/p&gt;

&lt;p&gt;This course is the JavaScript Algorithms and Data Structures Masterclass on Udemy.&lt;/p&gt;

&lt;p&gt;I generally understand the concepts behind Big O, but I sometimes struggle to analyze the time and space complexity for different solutions to a problem.&lt;/p&gt;

&lt;h3 id=&quot;counting-operations&quot;&gt;Counting operations&lt;/h3&gt;

&lt;p&gt;The idea here is that to analyze a solution, you need to have a general idea of how much time (or space) it is taking. Going through the code, you &lt;strong&gt;count all of the operations and assignments&lt;/strong&gt; that are taking place.&lt;/p&gt;

&lt;p&gt;You don’t need the most accurate tally. It’s about noticing general trends. Let’s say your function takes an argument &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, a number. If you notice that your code often does something &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; times, it will take longer to complete as the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; grows.&lt;/p&gt;

&lt;h3 id=&quot;big-o-notation&quot;&gt;Big O Notation&lt;/h3&gt;

&lt;p&gt;Describes the relationship of the input size of a function, and time it takes to run. It’s about describing overall trends. We are talking about the worst case scenario, or the upper bounds. For example, if you have an input of a large array, and the function is searching that array for a specific item, we have to assume that we need to search the whole array, even if in reality, the item is found earlier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time complexity&lt;/strong&gt; is the time it takes an algorithm to run.&lt;/p&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;p&gt;O(1) is constant - it means that no matter what &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is, the time will be about the same.&lt;/p&gt;

&lt;p&gt;O(n) is linear - as &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; grows, the time takes longer&lt;/p&gt;

&lt;p&gt;O(n^2) is quadratic - as &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; grows, the time increases exponentially&lt;/p&gt;

&lt;h3 id=&quot;simplifying&quot;&gt;Simplifying&lt;/h3&gt;

&lt;p&gt;Let’s say there are 10 operations that happen in this function, &lt;code class=&quot;highlighter-rouge&quot;&gt;10n&lt;/code&gt;. We don’t need to worry about the 10, and just simplify to &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;. We just care about what happens as the input grows.&lt;/p&gt;

&lt;p&gt;In general, constants don’t matter, and we can get rid of them. It’s about comparing the different algorithms to each other.&lt;/p&gt;

&lt;p&gt;Example: O(n^2 + 5n + 8) simplifies to n^2. This is because if you plug in a large number for &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, 5n and 8 are tiny in comparison to n^2, so we can ignore them.&lt;/p&gt;

&lt;p&gt;Rule of thumb:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;arthimetic operations are constant&lt;/li&gt;
  &lt;li&gt;variable assignment is constant&lt;/li&gt;
  &lt;li&gt;accessing items in an array by index, or object by key, is constant&lt;/li&gt;
  &lt;li&gt;loops: the complexity is the length of the loop times the complexity of whatever is inside the loop - that’s why we multiply n for nested loops&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just need to worry about what happens as &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; grows - not what happens when &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is small.&lt;/p&gt;

&lt;h3 id=&quot;space-complexity&quot;&gt;Space complexity&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Space complexity&lt;/strong&gt; - the space, or memory, required by an algorithm.&lt;/p&gt;

&lt;p&gt;Rules of thumb:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;most primitive, except for strings, are constant space - booleans, numbers, undefined, and null&lt;/li&gt;
  &lt;li&gt;strings are O(n), &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; being the length of the string&lt;/li&gt;
  &lt;li&gt;reference types are also O(n) - for arrays, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is the length, and for objects,&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is the number of keys&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;logarithms&quot;&gt;Logarithms&lt;/h3&gt;

&lt;p&gt;Reminder of how logs work: logs are the inverse of exponentiation.&lt;/p&gt;

&lt;p&gt;They work like this:
&lt;code class=&quot;highlighter-rouge&quot;&gt;log2(value) = exponent =&amp;gt; 2^exponent = value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Rule of thumb: The logarithm of a number roughly measures the number of times you can divide that number by its base before you get a value that’s less than or equal to one.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log2(8) = 3

// divide 8 by 2 as many times as you can before geting to 1 (or less)

8 / 2 = 4
4 / 2 = 2
2 / 2 = 1

// it took 3 operations, so the answer is 3.

//Also, 2 to the power of 3 = 8 (2 * 2 * 2)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.khanacademy.org/math/algebra2/x2ec2f6f830c9fb89:logs/x2ec2f6f830c9fb89:log-intro/a/intro-to-logarithms&quot;&gt;Here’s a khanacedemy article&lt;/a&gt; explaining logarithms in a beginner friendly way.&lt;/p&gt;

&lt;p&gt;O(log(n)) is one of the best ones you can have, second to constant time. On a graph, it is essentially the opposite of an exponential graph - after an initial increase, the curve flattens out.&lt;/p&gt;</content><author><name></name></author><category term="computer-science" /><category term="data-structures" /><summary type="html">I am learning about data structures and algorithms again.</summary></entry><entry><title type="html">Learning Jest - some basics</title><link href="http://localhost:4000/jest-learning" rel="alternate" type="text/html" title="Learning Jest - some basics" /><published>2024-10-17T16:30:00-06:00</published><updated>2024-10-17T16:30:00-06:00</updated><id>http://localhost:4000/jest-learning</id><content type="html" xml:base="http://localhost:4000/jest-learning">&lt;p&gt;I’m starting to get into testing with Jest for a work project.&lt;/p&gt;

&lt;p&gt;We landed on using Jest and React Testing Library with our React project, as it works nicely (so I’ve heard) with apps set up with create-react-app.&lt;/p&gt;

&lt;p&gt;I realize there are new build tools like Vite (with testing library Vitest), and that create-react-app is not getting new updates these days, but this is what works best with our current project set-up.&lt;/p&gt;

&lt;p&gt;So, here are some notes on the basics I learned about Jest. This follows what was taught in the Learn React Testing course on Codecademy.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-your-tests&quot;&gt;Setting up your tests&lt;/h3&gt;

&lt;p&gt;Jest is meant primarily for unit testing. For our project we are planning to use it to test utility functions and other smaller pieces of code.&lt;/p&gt;

&lt;p&gt;You can keep the tests in the same folder with the file it is testing, or have a separate directory, called &lt;code class=&quot;highlighter-rouge&quot;&gt;__tests__&lt;/code&gt;. I like this option so all the tests are in one place and not cluttering the rest of the code. You can copy the file structure of the project in the tests folder to make it easy to navigate.&lt;/p&gt;

&lt;p&gt;When creating a test file, name it the same thing as the file you are testing. Files must end with .test.js, .spec.js, or be located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;__tests__/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;For example, if the function you’re testing is &lt;code class=&quot;highlighter-rouge&quot;&gt;getVehicleSpeed.js&lt;/code&gt;, the test file would be called &lt;code class=&quot;highlighter-rouge&quot;&gt;getVehicleSpeed.test.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In your terminal, running the command &lt;code class=&quot;highlighter-rouge&quot;&gt;npm test&lt;/code&gt; runs your tests in watch mode, so the tests will run every time you save. When the tests run, they print the results to the console. There are different flags you can use with this command, like &lt;code class=&quot;highlighter-rouge&quot;&gt;npm test -- --coverage&lt;/code&gt; which gives a detailed breakdown of how much of your code is covered by tests.&lt;/p&gt;

&lt;h3 id=&quot;unit-testing&quot;&gt;Unit testing&lt;/h3&gt;

&lt;p&gt;Now getting a bit more into the implementation…&lt;/p&gt;

&lt;p&gt;For unit testing, we are testing individual functions. In Jest you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;it()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; function - they do the same thing.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;it()&lt;/code&gt; takes three arguments:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;a string describing the expected result of the test&lt;/li&gt;
  &lt;li&gt;a callback function with testing logic&lt;/li&gt;
  &lt;li&gt;an optional timeout&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;how-to-set-up-the-test-file&quot;&gt;How to set up the test file&lt;/h3&gt;

&lt;p&gt;Import the functions you are testing into your test file.&lt;/p&gt;

&lt;p&gt;In this file we use &lt;strong&gt;assertions&lt;/strong&gt; which define the expected behavior of the function.&lt;/p&gt;

&lt;p&gt;An example of this is the built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;expect()&lt;/code&gt; function. Whatever we pass into &lt;code class=&quot;highlighter-rouge&quot;&gt;expect()&lt;/code&gt; is an expression we want to test.&lt;/p&gt;

&lt;p&gt;Assertions are ususally used with matcher methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;toBe()&lt;/code&gt;, into which we pass the expected result&lt;/p&gt;

&lt;p&gt;In the callback function of &lt;code class=&quot;highlighter-rouge&quot;&gt;it()&lt;/code&gt;, follow this pattern: Arrange, Act, Assert&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arrange:&lt;/strong&gt; setting up your variables and conditions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Act:&lt;/strong&gt; invoke the function you are testing, using variables from the “arrange” stage as input. Save the result of this function to a variable&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assert:&lt;/strong&gt; check if we got the expected result by using methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;expect()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;toEqual()&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;matcher-methods&quot;&gt;Matcher methods&lt;/h4&gt;

&lt;p&gt;Matcher methods are ways of testing our assertions, where we put the result we’re expecting&lt;/p&gt;

&lt;p&gt;Common ones include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;toBeDefined&lt;/li&gt;
  &lt;li&gt;toEqual - does deep equality checks&lt;/li&gt;
  &lt;li&gt;toBe - compares primitive values&lt;/li&gt;
  &lt;li&gt;toBeTruthy&lt;/li&gt;
  &lt;li&gt;not - gives oppositve result&lt;/li&gt;
  &lt;li&gt;toContain - check that an item is in an array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;adds 1 and 2 to equal 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;api-callsasync-tests&quot;&gt;API calls/async tests&lt;/h3&gt;

&lt;p&gt;When using asychronous code with callbacks, don’t add assertions to callback functions. They don’t work. Jest doesn’t know that it should wait for a test to fail before moving on to the next test.&lt;/p&gt;

&lt;p&gt;We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; as a parameter of our &lt;code class=&quot;highlighter-rouge&quot;&gt;it()&lt;/code&gt; function. This is called after the expect() assertion. Jest knows to wait until &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; is called before ending the test. So basically, for async calls, add &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; after the function call. It is good to do this inside a try/catch, so we can catch any errors, and pass them to &lt;code class=&quot;highlighter-rouge&quot;&gt;done(error)&lt;/code&gt;. If we didn’t have this, done would never be reached, so the test would eventually fail due to a timeout error.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchUserData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fetches user data asynchronously&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fetchUserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If using async/await, don’t need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; - just use async/await for code that returns promises:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchUserData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fetches user data asynchronously&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchUserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mocking-api-calls&quot;&gt;Mocking api calls&lt;/h3&gt;

&lt;p&gt;This is for testing the functions that call the api, not testing the api itself.&lt;/p&gt;

&lt;p&gt;We bypass the api and return values instead. In our tests, we create a mock function and use it in place of our real function.&lt;/p&gt;

&lt;p&gt;This is done in case there are issues getting the data from the api. I think we are assuming that there is a lot of code involved in our function, and the api call is a small part of it that we don’t want blocking our tests from working properly.&lt;/p&gt;

&lt;p&gt;Steps for creating the mock function:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a directory &lt;strong&gt;mocks&lt;/strong&gt; - test will look for it here&lt;/li&gt;
  &lt;li&gt;Create a file with the same name as the function being mocked&lt;/li&gt;
  &lt;li&gt;Create a module, use jest.fn() to create the function we want to mock&lt;/li&gt;
  &lt;li&gt;Export module&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The mock function looks like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Steps to use a mock function in your test file:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;import the real function into the test file&lt;/li&gt;
  &lt;li&gt;wrap &lt;code class=&quot;highlighter-rouge&quot;&gt;jest.mock()&lt;/code&gt; around the file path of the real file&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//import the actual function&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./utils/http-request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//before the it() function, we tell the test file we want to use our mock function, instead of the one we imported&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./utils/http-request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//then inside your it(), call the function by the name it was imported as&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;testing http request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;///some code here&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockResolvedValueOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolvedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//more code below&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Truthfully, I am a bit confused by we need to place a mocks folder near the function we are testing in the code. I’d like to keep everything in the &lt;code class=&quot;highlighter-rouge&quot;&gt;__tests__&lt;/code&gt; directory. I found &lt;a href=&quot;https://stackoverflow.com/questions/51303189/how-to-move-mocks-folder-in-jest-to-test&quot;&gt;this stackoverflow post&lt;/a&gt; that could help work around this, but haven’t looked into it yet.&lt;/p&gt;

&lt;p&gt;Overall, it seems pretty straight-forward. We’ll see how well it works once we actually get started.&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><category term="testing" /><summary type="html">I’m starting to get into testing with Jest for a work project.</summary></entry><entry><title type="html">JavaScript modules - CommonJS vs ES modules</title><link href="http://localhost:4000/js-modules" rel="alternate" type="text/html" title="JavaScript modules - CommonJS vs ES modules" /><published>2024-10-10T16:30:00-06:00</published><updated>2024-10-10T16:30:00-06:00</updated><id>http://localhost:4000/js-modules</id><content type="html" xml:base="http://localhost:4000/js-modules">&lt;h3 id=&quot;why-do-we-need-modules-in-javascript&quot;&gt;Why do we need modules in JavaScript?&lt;/h3&gt;

&lt;p&gt;There are a lot of good reasons to separate our code into modules.&lt;/p&gt;

&lt;p&gt;Each module should have a specific use. This makes the code reusable across your whole application, and easier to maintain and debug. This can also help you to avoid repetition in your code.&lt;/p&gt;

&lt;p&gt;Another reason is we don’t want to add all of our variables to the global namespace. You could end up having variables of the same name conflicting with one another. Each module has its own scope, with variables and functions that are not visible to outside code unless specifically exported.&lt;/p&gt;

&lt;h3 id=&quot;different-types-of-module-solutions&quot;&gt;Different types of module solutions&lt;/h3&gt;

&lt;p&gt;Modules in JavaScript evolved over time, so developers came up with different solutions independently. We’ll talk about a couple popular solutions here.&lt;/p&gt;

&lt;h4 id=&quot;commonjs&quot;&gt;CommonJS&lt;/h4&gt;

&lt;p&gt;Whenever you see &lt;code class=&quot;highlighter-rouge&quot;&gt;module.exports&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt; used together it is from CommonJS. You will see this in Node.js, but not in the browser.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt; is used to import code from another file, which was exported using &lt;code class=&quot;highlighter-rouge&quot;&gt;module.exports&lt;/code&gt;. Multiple things can be exported from a module using an object.&lt;/p&gt;

&lt;p&gt;With CommonJS, modules are loaded &lt;em&gt;synchronously&lt;/em&gt;, meaning the whole module needs to be loaded before the code can execute.&lt;/p&gt;

&lt;h4 id=&quot;es-modules&quot;&gt;ES Modules&lt;/h4&gt;

&lt;p&gt;This is being used when you see &lt;code class=&quot;highlighter-rouge&quot;&gt;export default&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; in an app.&lt;/p&gt;

&lt;p&gt;Instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; we use &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;, and instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;module.exports&lt;/code&gt; we use &lt;code class=&quot;highlighter-rouge&quot;&gt;export default&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ES modules are used mainly in the browser, but can be used server-side as well. It seems as though the goal is to make ESModules the standard for both server and browser as time goes on. In your HTML, you can import modules in your script tag, as long as you specify the &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; attribute to &lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myModule.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sometimes you can get CORS errors if you try to open your HTML page as a file in your browser. You can use the npm package “serve” to host your page locally. Also, if you are using a framework with ES6 modules, this shouldn’t be an issue you need to fix yourself.&lt;/p&gt;

&lt;p&gt;ES6 Modules also offer the ability to load modules asynchronously through dynamic imports. They can be used like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someCondition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/my-module.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;helpful-links&quot;&gt;Helpful links&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.logrocket.com/commonjs-vs-es-modules-node-js/&quot;&gt;https://blog.logrocket.com/commonjs-vs-es-modules-node-js/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=d-0uCi61rtg&quot;&gt;https://www.youtube.com/watch?v=d-0uCi61rtg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="javascript" /><summary type="html">Why do we need modules in JavaScript?</summary></entry><entry><title type="html">Developing a chat app using AWS AppSync</title><link href="http://localhost:4000/appsync-chat-app" rel="alternate" type="text/html" title="Developing a chat app using AWS AppSync" /><published>2023-11-21T16:30:00-07:00</published><updated>2023-11-21T16:30:00-07:00</updated><id>http://localhost:4000/appsync-chat-app</id><content type="html" xml:base="http://localhost:4000/appsync-chat-app">&lt;p&gt;I recently created a chat app at work using AWS AppSync, and then decided to re-create it on my own time.&lt;/p&gt;

&lt;p&gt;There were some new features rolled out in AppSync since I started my work project, so I wanted to try them out. It also gave me the opportunity to learn more about setting up authentication with Amplify and Cognito, which I had never tackled before, as authentication had been set up at work by another developer.&lt;/p&gt;

&lt;p&gt;Everything below has also been included on my portfolio site.&lt;/p&gt;

&lt;h3 id=&quot;why-i-chose-to-use-appsync&quot;&gt;Why I chose to use AppSync&lt;/h3&gt;

&lt;p&gt;To create a chat app you need to ensure messages appear on the screen in real time. There needs to be a bi-directional relationship between the front-end and database, and the front-end must display messages immediately upon their creation without refreshing the page. One option for this could have been to use Apollo Client WebSocket Link.&lt;/p&gt;

&lt;p&gt;I attempted this with my original work project. The front-end set-up was simple, but I quickly realized that setting up a web-socket on a serverless app built with AWS Lambda would be challenging. This required manual set-up of the web-socket, creating a new connection each time a user logged in, and storing the connection information in the database. It was much simpler to use AppSync, which removed all of this manual work.&lt;/p&gt;

&lt;h3 id=&quot;the-nitty-gritty-of-my-appsync-experience&quot;&gt;The nitty-gritty of my AppSync experience&lt;/h3&gt;

&lt;p&gt;AppSync allows you to create a GraphQL API that connects to your backend datasources. Resolvers are the functions in your API that handle incoming requests. For my projects, resolvers generally will receive a request, get something from or put something into a DynamoDB database, and return some data to the front-end. A few times I used Lambda functions, connected to DynamoDB, as my datasource, which I will elaborate on later.&lt;/p&gt;

&lt;p&gt;AppSync initially used VTL (Velocity Template Language), which is a Java-based language, to write mapping template code (basically equivalent to resolvers). When I began the original project, AWS just began to roll out JavaScript-based resolvers in a limited capacity. Since it was such a new functionality, and all the AppSync tutorials by my favorite devs on social media were using VTL, I decided to use VTL as well. It was time consuming for me to learn, and debugging in AppSync was often difficult, but eventually I figured it out and delivered a working app to my team.&lt;/p&gt;

&lt;p&gt;When it came time for me to create my own project, JavaScript could be used with any type of resolver. I assumed this would make my life easier and coding this project would be faster. This was not the case. JavaScript is not run on a browser or Node.js runtime, but on a special &lt;code class=&quot;highlighter-rouge&quot;&gt;APPSYNC_JS&lt;/code&gt; runtime, and there are limits on what JavaScript features may be used. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;try/catch&lt;/code&gt; statements are not supported, making error handling challenging; you need to use their built-in functions. &lt;code class=&quot;highlighter-rouge&quot;&gt;async/await&lt;/code&gt; and promises are also not supported. While I understand the logic behind this - awaiting promises is too time-consuming and your AppSync API is supposed to be fast - this presented challenges for my multi-step code.&lt;/p&gt;

&lt;p&gt;Pipeline resolvers are made for this scenario. This could have worked, except there were some cases when I needed to query multiple items from the database using a global secondary index (GSI). There is a built-in AppSync function called &lt;code class=&quot;highlighter-rouge&quot;&gt;BatchGet&lt;/code&gt; which I tried to use, however it will only allow you to get items using the primary key, no secondary indexes, so it didn’t work for me.&lt;/p&gt;

&lt;p&gt;At this point I could have re-worked my data structures, but instead I put my JavaScript code into Lambda functions and used them as the datasource. I was able to use the JavaScript functionality I was familiar with and write the exact DynamoDB queries I needed. For my purposes this worked fine, and I never noticed any performance issues.&lt;/p&gt;

&lt;h3 id=&quot;take-aways-and-future-updates&quot;&gt;Take-aways and future updates&lt;/h3&gt;

&lt;p&gt;Overall I enjoyed learning AppSync. It’s a big time-saver to not have to manually set up web-sockets. Writing the resolvers was the most challenging aspect, since there seemed to be a lot of restrictions on what could be included in your code. I often received errors that said “there is a problem with the code” but nothing more, so debugging was difficult.&lt;/p&gt;

&lt;p&gt;Working with GraphQL is a great experience since it helps me think of my code in terms of inputs and outputs, and it always makes me want to work more with types, specifically using TypeScript. I would have written the backend for this chat app in TypeScript, but I struggled with importing my own types into the code. Again, I got the “there is a problem with the code” error, so it wasn’t clear what exactly the problem was.&lt;/p&gt;

&lt;p&gt;It seems as if AppSync wants you to use it to auto-generate all your types, schemas, and datasources, when I want to write it all myself. In the future I’d like to revisit this; I’d like to see if the developers make this process easier, or dive deeper into the docs to find out if I missed any key details for TypeScript implementation. Perhaps in this environment of AI and cloud services, I need to better embrace the ability of these kinds of services to auto-generate my code and infrastructure for me, if I want to produce software quickly.&lt;/p&gt;

&lt;h3 id=&quot;helpful-resources&quot;&gt;Helpful resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mavi888/web-client-appsync-test/tree/master&quot;&gt;Foobar Serverless github repo and accompanying youtube video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sid88in/serverless-appsync-plugin/tree/master/doc&quot;&gt;serverless-appsync-plugin docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/appsync/latest/devguide/what-is-appsync.html&quot;&gt;AWS AppSync developer guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="aws" /><category term="serverless" /><category term="appsync" /><summary type="html">I recently created a chat app at work using AWS AppSync, and then decided to re-create it on my own time.</summary></entry><entry><title type="html">Ordering elements in a PDF, and dealing with an ATS</title><link href="http://localhost:4000/pdfs-and-ats" rel="alternate" type="text/html" title="Ordering elements in a PDF, and dealing with an ATS" /><published>2023-09-12T15:30:00-06:00</published><updated>2023-09-12T15:30:00-06:00</updated><id>http://localhost:4000/pdfs-and-ats</id><content type="html" xml:base="http://localhost:4000/pdfs-and-ats">&lt;p&gt;We’re stepping away from the world of programming for a moment to talk about a design-related topic.&lt;/p&gt;

&lt;p&gt;I’ve recently been working on my resume and have been learning a lot of new things.&lt;/p&gt;

&lt;p&gt;The last time I was in school I took a career class, with a few days dedicated to resumes. They showed us all the latest trends in resume designs, and I thought I came up with something fairly eye-catching. If I’m honest, it was just a template from Canva that I adjusted a bit, so it wasn’t my original design, but I found the software very easy to work with. I liked the drag-and-drop functionality and the end result. It produced a nice PDF with a two-column layout.&lt;/p&gt;

&lt;p&gt;I ended up getting my next two jobs through my school or people I knew, so this resume worked fine. I have been updating the same resume with new skills and work experience ever since, up until recently.&lt;/p&gt;

&lt;p&gt;I happened to bring this up with a friend that had her resume reviewed by the career services at her university, so I asked her to have a look at mine. One of her main criticisms was the two column layout. If I were to use it to apply to jobs online, applicant tracking systems may not be able to read it, because these systems read documents left to right. I looked into this a little more and this seems to be the consensus about two-column layouts, although it’s possible some systems are sophisticated enough to read them anyway.&lt;/p&gt;

&lt;p&gt;Assuming most systems aren’t at that level of sophistication, though, it means the text from the left and right column will be jumbled together. Of course the systems wouldn’t be able to parse this.&lt;/p&gt;

&lt;h3 id=&quot;first-attempt-at-fixing-it---creating-a-one-column-layout&quot;&gt;First attempt at fixing it - creating a one-column layout&lt;/h3&gt;

&lt;p&gt;I used Canva again to make a one-column resume. I ran it through a resume checker to see if it scored well, and it did not. It couldn’t find important sections of my resume that I had included. I was very confused as to why, since now it should be in a more readable format, right?&lt;/p&gt;

&lt;h3 id=&quot;second-attempt---creating-the-template-myself-in-illustrator&quot;&gt;Second attempt - creating the template myself in Illustrator&lt;/h3&gt;

&lt;p&gt;I thought maybe Canva was doing something weird with the formatting, so I decided to create a new resume from scratch using Adobe Illustrator, creating every element from scratch myself.&lt;/p&gt;

&lt;p&gt;I ran the new document through the resume checker, and found a similar result. Some parts of my resume were coming through as expected, like my contact information, but some sections were still missing. I googled the problem, and some of the solutions mentioned the order the elements are created in the document can cause things to appear out of order, and to check what happens when you copy the text from the PDF into Notepad.&lt;/p&gt;

&lt;p&gt;When I copied the text into Notepad, it was a mess. Everything was completely out of order, even though it appeared normal in the PDF. Text didn’t properly follow the headings, which is why the resume checker couldn’t locate it.&lt;/p&gt;

&lt;h3 id=&quot;third-attempt---re-ordering-the-elements-before-export&quot;&gt;Third attempt - re-ordering the elements before export&lt;/h3&gt;

&lt;p&gt;The way I chose to fix this was by going into the layers panel in Illustrator and manually putting the elements in the correct order. I could see that the order they were in before this fix matched the way they showed up in Notepad, so this would likely fix my problem.&lt;/p&gt;

&lt;p&gt;After exporting the new document, I pasted the text into Notepad again, and this time the order was correct.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Despite not being a programming problem, this issue felt a lot like the normal debugging I do day-to-day. I find it so frustrating that these problems you cannot easily see could completely throw off someone’s job search, and they may not even realize it.&lt;/p&gt;

&lt;p&gt;There is a lot of advice given about resumes, and it seems to change constantly. This is a whole separate skill set than a developer skillset. It would be easy to feel like these automated rejections are rejecting your developer skillset and experience, or even you as a person. But it’s truly not that personal. The entities reading this curated summary of your work life aren’t even human. All I can say is keep learning new skills and trying your best.&lt;/p&gt;</content><author><name></name></author><category term="design" /><summary type="html">We’re stepping away from the world of programming for a moment to talk about a design-related topic.</summary></entry><entry><title type="html">Implementing hash tables in JavaScript</title><link href="http://localhost:4000/hash-tables-javascript" rel="alternate" type="text/html" title="Implementing hash tables in JavaScript" /><published>2023-08-10T15:30:00-06:00</published><updated>2023-08-10T15:30:00-06:00</updated><id>http://localhost:4000/hash-tables-javascript</id><content type="html" xml:base="http://localhost:4000/hash-tables-javascript">&lt;p&gt;Hash tables are a commonly used data structure and, apparently, are commonly asked about in interviews.&lt;/p&gt;

&lt;p&gt;Hash tables store data in key-value pairs. They should be used when you are looking for very quick look-ups. Generally, if you search a hash table for a particular key, it should be able to find it for you without having to search the entire data structure, giving look-ups O(1) time.&lt;/p&gt;

&lt;p&gt;Inserting and deleting should also be O(1) time. They take up O(n) space.&lt;/p&gt;

&lt;p&gt;Here are a couple links that were helpful for me to learn about hash tables in JavaScript:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/javascript-hash-table-associative-array-hashing-in-js/&quot;&gt;this freeCodeCamp article&lt;/a&gt; for a good overview and a look into a simple JavaScript implementation&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.educative.io/blog/data-strucutres-hash-table-javascript&quot;&gt;this educative article&lt;/a&gt; for learning more about collisions, and generally a good overview&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=F95z5Wxd9ks&amp;amp;t=459s&quot;&gt;this freeCodeCamp video&lt;/a&gt; for another explanation and JavaScript implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In day-to-day coding with JavaScript, you shouldn’t need to implement hash tables yourself, as we have &lt;code class=&quot;highlighter-rouge&quot;&gt;Objects&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Maps&lt;/code&gt; that do this for us. The freeCodeCamp article above explains some of the drawbacks of objects, and where maps have made improvements.&lt;/p&gt;

&lt;p&gt;Essentially, object methods (inherited from the Object prototype) can be easily overwritten by mistake. Maps require you to use built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; methods when working with the map, and inherited methods can’t be overwritten.&lt;/p&gt;

&lt;h3 id=&quot;implementing-hash-tables-ourselves&quot;&gt;Implementing hash tables ourselves&lt;/h3&gt;

&lt;p&gt;There are many ways you could do this, but with the help of the above resources I came up with an implementation I like. Creating a HashTable class made the most sense to me.&lt;/p&gt;

&lt;p&gt;Behind the scenes, a hash table is just an array of arrays. You determine the size of the array when you initially create the hashtable. I like to make this size dynamic instead of hardcoded. You could probably change the size if you wanted to later on, but this seemed simpler for now.&lt;/p&gt;

&lt;p&gt;Here is the constructor inside the HashTable class:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, you’d create a new hash table like so:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashtable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HashTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//where 5 is size of array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we need a hash function. This takes the key of the item you are adding, and converts it into a number. This number is an index in the hash table array. The way we did this here, based off the examples in the resources above, is by calculating a number based on the character codes in the key. Each character is assigned to a numeric code. We sum these values and use the modulo &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; operator to ensure our hash isn’t larger than the length of the array.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We use the hash function everywhere - it’s how we translate the key into the index where our item is stored. We use this to get the item, delete it, and of course when we store it for the first time.&lt;/p&gt;

&lt;h3 id=&quot;collisions&quot;&gt;Collisions&lt;/h3&gt;

&lt;p&gt;One thing that comes up with hash tables is the concept of collisions.&lt;/p&gt;

&lt;p&gt;What happens when the hash function generates the same index for two different keys. We want to be able to overwrite keys when they are &lt;em&gt;the same&lt;/em&gt;, but not when we have different keys assigned to the same index.&lt;/p&gt;

&lt;p&gt;There are lots of ways of dealing with this. The way it’s handled in the above mentioned youtube video, and here as well, is by considering each index of the hash table array a &lt;code class=&quot;highlighter-rouge&quot;&gt;bucket&lt;/code&gt; that can store multiple items.&lt;/p&gt;

&lt;p&gt;This complicates the code a bit, and the code’s performance as well when we have multiple items in a bucket.&lt;/p&gt;

&lt;p&gt;Check out the code for the &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//get an index using hash function&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//check if anything at this index - if there isn't, add item&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inserted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//check everything in this bucket to see if we already have this key&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

                    &lt;span class=&quot;c1&quot;&gt;//if we come across the same key, replace the old value with the new value&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;

                    &lt;span class=&quot;nx&quot;&gt;inserted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//if after checking everything in the bucket we haven't added the new value, push it into the bucket now&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inserted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without the concept of buckets, this code would be just 3 lines (although there would perhaps be other algorithms needed to check for collisions):&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our longer set method, you use the hash function to get the index for this key. You then check if there is anything at this index. If not, we just insert it, no big deal. We need to insert it as &lt;code class=&quot;highlighter-rouge&quot;&gt;[[key, value]]&lt;/code&gt;, because this index is now itself an array. The key-value pair is also an array. So in this implementation, you get a very nested array.&lt;/p&gt;

&lt;p&gt;If there is already something at this index, we have a collision. We need to check if this key already exists here, because we would want to overwrite it. Otherwise, we just push our new key-value pair into the array at this index.&lt;/p&gt;

&lt;p&gt;The remove and get methods need to work similarly, checking if there are multiple items in the bucket, an then iterating through to get the correct one.&lt;/p&gt;

&lt;p&gt;I will reiterate here, that whenever we do this, the time complexity is &lt;strong&gt;no longer O(1) but is now O(n)&lt;/strong&gt;, since it is no longer a simple look-up/get/delete using a single key. The bucket concept makes this less efficient, which I feel defeats the purpose of using this data structure, at least if your concern is time. I’d have to look closer at the other options for handling collisions to see if they are any better.&lt;/p&gt;

&lt;h3 id=&quot;all-the-code&quot;&gt;All the code&lt;/h3&gt;

&lt;p&gt;There may be some issues I haven’t come across yet, but here is the whole HashTable implementation. I like seeing how this can work behind the scenes, but all we really need is objects and maps.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HashTable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//check length of the bucket - if more than one item, have to iterate through, making the operation O(n)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//check that key matches&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//otherwise, just return the item - O(1) operation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//get an index using hash function&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//check if anything at this index - if there isn't, add item&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inserted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//check everything in this bucket to see if we already have this key&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;//if we come across the same key, replace the old value with the new value&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

          &lt;span class=&quot;nx&quot;&gt;inserted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//if after checking everything in the bucket we haven't added the new value, push it into the bucket now&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inserted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//if nothing here, return&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//check if this bucket has multiple items, should be able to splice here since we're not depending on the index *inside* the bucket&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//if one item here, set to undefined&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//originally wanted to use splice, but that changes the index of everything else&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="algorithms" /><category term="data-structures" /><category term="coding-problems" /><category term="javascript" /><summary type="html">Hash tables are a commonly used data structure and, apparently, are commonly asked about in interviews.</summary></entry><entry><title type="html">Binary trees; isSameTree problem</title><link href="http://localhost:4000/binary-trees" rel="alternate" type="text/html" title="Binary trees; isSameTree problem" /><published>2023-07-28T15:30:00-06:00</published><updated>2023-07-28T15:30:00-06:00</updated><id>http://localhost:4000/binary-trees</id><content type="html" xml:base="http://localhost:4000/binary-trees">&lt;p&gt;It’s time to dive into some binary tree coding problems.&lt;/p&gt;

&lt;p&gt;But I think I need to learn more about binary trees, and how to tackle these kinds of problems first, so I actually have a chance of getting them right.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This was a quick, &lt;a href=&quot;https://www.youtube.com/watch?v=GzJoqJO1zdI&quot;&gt;helpful video&lt;/a&gt; that summarized binary trees nicely&lt;/li&gt;
  &lt;li&gt;This &lt;a href=&quot;https://www.youtube.com/watch?v=5cU1ILGy6dM&quot;&gt;video from freeCodeCamp&lt;/a&gt; describes how to deal with binary search trees in JavaScript&lt;/li&gt;
  &lt;li&gt;This &lt;a href=&quot;https://www.freecodecamp.org/news/binary-search-tree-traversal-inorder-preorder-post-order-for-bst/&quot;&gt;article from freeCodeCamp&lt;/a&gt; summarizing tree traversal&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;compared-to-other-data-structures---linked-lists&quot;&gt;Compared to other data structures - linked lists&lt;/h3&gt;

&lt;p&gt;Like linked lists, trees are made up of nodes that have data and pointers.&lt;/p&gt;

&lt;p&gt;I’ve delved a bit into singly linked-lists, whose nodes have one pointer. In comparison, trees can have multiple pointers to the next nodes. In the case of a binary tree, a node points towards a maximum of 2 child nodes. Each node can have a &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt; pointer, comparable to the &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; pointer in a linked list.&lt;/p&gt;

&lt;p&gt;The top node of the tree is called the &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; node, comparable to the &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; node of a linked list. Nodes with no children are called &lt;code class=&quot;highlighter-rouge&quot;&gt;leaf&lt;/code&gt; nodes. The path from the root to a leaf is called a &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;traversing-a-binary-tree&quot;&gt;Traversing a binary tree&lt;/h3&gt;

&lt;p&gt;For starters, there are two main approaches to code a tree traversal:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;using a &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop and an “on” pointer (like for linked lists, using a “current” pointer with a while loop)&lt;/li&gt;
  &lt;li&gt;recursion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you use recursion it’s called branching recursion. Since a node can have multiple children, your stack frame can be branching too.&lt;/p&gt;

&lt;p&gt;Often you need to visit every node in the tree, but how do I know what order to visit in? There are three main types of traversal:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;in-order traversal&lt;/strong&gt;: visit left subtree, then root, then right subtree. Like you’ve moving across the tree from left to right. If you printed out each node as you visted them, they would be in ascending order from left-most to right-most node.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;pre-order traversal&lt;/strong&gt;: visit root, then left subtree, then right subtree. Like you’ve moving from top of tree to bottom (root to leaf). Use if you need to explore the tree from root to leaf, good for making copies of trees.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;post-order traversal&lt;/strong&gt;: visit left subtree, right subtree, then root. Like you’re travelling from the bottom up (leaf to root). Use if you need to explore leaves before roots. Good for deleting a tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;coding-problem-issametree-solved-with-recursion&quot;&gt;Coding problem: isSameTree, solved with recursion&lt;/h3&gt;

&lt;p&gt;The first coding problem I worked on to practice binary trees was, given two trees &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;, determine if they are the same. If they are the same, they have the same structure AND values at each node.&lt;/p&gt;

&lt;p&gt;I decided to try solving this recursively. Sometimes I still struggle with recursion, due to its nested nature. One thing that helps me is to remember that I should always be returning whatever data type the final result is looking for. In this case, we are looking for a boolean, so my base cases must all return true or false. It’s also helpful to think of recursion as repeating sub-problems. What is the sub-problem you are trying to solve here, over and over again?&lt;/p&gt;

&lt;p&gt;In this case, the sub-problem is checking if the current nodes p and q are equal.&lt;/p&gt;

&lt;p&gt;After checking base cases, you need some logic for checking your next values. That’s where your recursive calls come in. Then, you need to do something with the result of those calls. The outer function could return at this point, or maybe you need to add the result to another data structure you’re keeping track of, like a memo object.&lt;/p&gt;

&lt;p&gt;This is what I came up with, and it submitted to leetcode successfully:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * @param {TreeNode} p
 * @param {TreeNode} q
 * @return {boolean}
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isSameTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//base cases&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//continue exploring tree&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;isSameTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;isSameTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, the base cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;both p and q are null: in this case return true, because they are equal, and we have reached a leaf node. This branch has nothing else to explore and if we got this far, it is the same for p and q&lt;/li&gt;
  &lt;li&gt;one of p &lt;strong&gt;or&lt;/strong&gt; q, &lt;strong&gt;not both&lt;/strong&gt;, is null: if one node is null and the other is not, they are not &lt;em&gt;structurally&lt;/em&gt; equal, so return false&lt;/li&gt;
  &lt;li&gt;check if the &lt;strong&gt;values&lt;/strong&gt; of p and q are equal. If not, return false. Otherwise, the nodes so far are equal and there is more tree to explore, so we can move on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next step: recursive calls&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;we need explore the left and right subtrees for our p and q nodes. If either of these returns false, it means p and q were not equal.&lt;/li&gt;
  &lt;li&gt;this is where you start to see branching recursion come into play, since you have to check the left and right child of every node.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, if we got through all of that and never encountered unequal structure or values, we can return true.&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next steps&lt;/h3&gt;

&lt;p&gt;I definitely need more practice with binary trees, so I’ll continue learning and practicing and will update here if I find anything notable.&lt;/p&gt;</content><author><name></name></author><category term="algorithms" /><category term="data-structures" /><category term="coding-problems" /><category term="recursion" /><summary type="html">It’s time to dive into some binary tree coding problems.</summary></entry></feed>